{"config":{"lang":["zh","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WELCOME","text":"<p>\ud83d\udcbb My Python Journey is a self-directed learning project, documenting my exploration of Python for data analysis. It serves as a comprehensive collection of study notes, practical exercises, and hands-on applications that showcase my progress in mastering Python programming.</p> <p>\ud83d\udcda If you are on the same boat, I hope you find the resources here helpful!</p>"},{"location":"#keep-calm-keep-coding","title":"Keep Calm &amp; Keep Coding!","text":""},{"location":"#project-layout","title":"Project Layout","text":""},{"location":"#modules","title":"Modules","text":"<ol> <li>Matplotlib</li> <li>Numpy<ul> <li>Self-defined functions for coloring and labeling scatter plots</li> </ul> </li> <li>Pandas</li> </ol>"},{"location":"#authors-note","title":"Author's Note","text":"<p>\ud83d\udcdd Web pages are predominantly written in English, yet I use Chinese from time to time for convenience, as I am bilingual.   </p>"},{"location":"#copyright","title":"Copyright","text":"<p>My Python Journey\u00a0\u00a9 2025\u00a0by\u00a0Rongqing Jia\u00a0is licensed under\u00a0CC BY-NC 4.0.   To view a copy of this license, visit https://creativecommons.org/licenses/by-nc/4.0/</p>"},{"location":"matplotlib/matplotlib_barchart/","title":"Matplotlib - Bar Chat","text":""},{"location":"matplotlib/matplotlib_barchart/#import-modules","title":"Import Modules","text":"Python<pre><code>import pyplot\nimport matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_barchart/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_barchart/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_barchart/#background","title":"Background","text":"<ul> <li>\u5047\u8bbe\u73b0\u5728\u67092017\u5e74\u5185\u5730\u7535\u5f71\u7968\u623f\u524d20\u7684\u7535\u5f71(\u5217\u8868a)\u548c\u7535\u5f71\u7968\u623f\u6570\u636e(\u5217\u8868b)</li> </ul> <p>Python<pre><code>a = \n[\"\u6218\u72fc2\",\"\u901f\u5ea6\u4e0e\u6fc0\u60c58\",\"\u529f\u592b\u745c\u4f3d\",\"\u897f\u6e38\u4f0f\u5996\u7bc7\",\"\u53d8\u5f62\u91d1\u521a5\uff1a\u6700\u540e\u7684\u9a91\u58eb\",\"\u6454\u8de4\u5427\uff01\u7238\u7238\",\n     \"\u52a0\u52d2\u6bd4\u6d77\u76d75\uff1a\u6b7b\u65e0\u5bf9\u8bc1\",\"\u91d1\u521a\uff1a\u9ab7\u9ac5\u5c9b\",\"\u6781\u9650\u7279\u5de5\uff1a\u7ec8\u6781\u56de\u5f52\",\"\u751f\u5316\u5371\u673a6\uff1a\u7ec8\u7ae0\",\"\u4e58\u98ce\u7834\u6d6a\",\"\u795e\u5077\u5976\u72383\",\n     \"\u667a\u53d6\u5a01\u864e\u5c71\",\"\u5927\u95f9\u5929\u7afa\",\"\u91d1\u521a\u72fc3\uff1a\u6b8a\u6b7b\u4e00\u6218\",\"\u8718\u86db\u4fa0\uff1a\u82f1\u96c4\u5f52\u6765\",\"\u609f\u7a7a\u4f20\",\"\u94f6\u6cb3\u62a4\u536b\u961f2\",\"\u60c5\u5723\",\"\u65b0\u6728\u4e43\u4f0a\"]\n</code></pre> Python<pre><code>b = [56.01,26.94,17.53,16.49,15.45,12.96,11.8,11.61,11.28,11.12,10.49,10.3,8.75,\n   7.55,7.32,6.99,6.88,6.86,6.58,6.23]\n</code></pre></p> <ul> <li>\u7535\u5f71\u7968\u623f\u6570\u636e\u7684\u5355\u4f4d\uff1a\u4ebf </li> </ul>"},{"location":"matplotlib/matplotlib_barchart/#modify-dataset","title":"Modify dataset","text":"<ul> <li>\u7528 <code>\\n</code> \u6765\u6362\u884c</li> </ul> Python<pre><code>a = \n[\"\u6218\u72fc2\",\"\u901f\u5ea6\u4e0e\u6fc0\u60c58\",\"\u529f\u592b\u745c\u4f3d\",\"\u897f\u6e38\u4f0f\u5996\u7bc7\",\"\u53d8\u5f62\u91d1\u521a5\uff1a\\n\u6700\u540e\u7684\u9a91\u58eb\",\"\u6454\u8de4\u5427\uff01\u7238\u7238\",\n     \"\u52a0\u52d2\u6bd4\u6d77\u76d75\uff1a\\n\u6b7b\u65e0\u5bf9\u8bc1\",\"\u91d1\u521a\uff1a\\n\u9ab7\u9ac5\u5c9b\",\"\u6781\u9650\u7279\u5de5\uff1a\\n\u7ec8\u6781\u56de\u5f52\",\"\u751f\u5316\u5371\u673a6\uff1a\\n\u7ec8\u7ae0\",\"\u4e58\u98ce\u7834\u6d6a\",\"\u795e\u5077\u5976\u72383\",\n     \"\u667a\u53d6\u5a01\u864e\u5c71\",\"\u5927\u95f9\u5929\u7afa\",\"\u91d1\u521a\u72fc3\uff1a\\n\u6b8a\u6b7b\u4e00\u6218\",\"\u8718\u86db\u4fa0\uff1a\\n\u82f1\u96c4\u5f52\u6765\",\"\u609f\u7a7a\u4f20\",\"\u94f6\u6cb3\u62a4\u536b\u961f2\",\"\u60c5\u5723\",\"\u65b0\u6728\u4e43\u4f0a\"]\n</code></pre>"},{"location":"matplotlib/matplotlib_barchart/#question","title":"Question","text":"<ul> <li>\u5982\u4f55\u66f4\u52a0\u76f4\u89c2\u7684\u5c55\u793a\u8be5\u6570\u636e\uff1f</li> </ul>"},{"location":"matplotlib/matplotlib_barchart/#solution","title":"Solution","text":"<ul> <li>Categorical data --&gt; using bar chat</li> </ul> <p>Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 20), dpi = 80)\n\n# Step 2: determine number of movies in the dataset a --&gt; equals to the number of bars\nx = range(len(a)) \nprint(x)\n\n# Step 3: draw the bar chat \nplt.bar(x, b, width = 0.3)\n\n# Step 4: set the x-axis\nplt.xticks(x, a, font_properties = my_font, rotation = 60)\n\n# Step 5: add description\nplt.xlabel(\"Name\")\nplt.ylabel(\"Sales\")\nplt.title(\"2017\u5e74\u5185\u5730\u7535\u5f71\u7968\u623f\u524d20\u7684\u7535\u5f71\u548c\u5176\u7968\u623f\u6570\u636e\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_1\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_barchart/#alternative-solution","title":"Alternative Solution","text":"<ul> <li>Draw a horizontal bar chat </li> </ul> <p>Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 10), dpi = 80)\n\n# Step 2: determine number of movies in the dataset a --&gt; equals to the number of bars\nx = range(len(a)) \nprint(x)\n\n# Step 3: draw the horizontal bar chat \nplt.barh(x, b, height = 0.3, color = \"orange\")\n\n# Step 4: set the x-axis\nplt.yticks(x, a, font_properties = my_font)\n\n# Step 5: add description\nplt.xlabel(\"Sales\")\nplt.ylabel(\"Name\")\nplt.title(\"2017\u5e74\u5185\u5730\u7535\u5f71\u7968\u623f\u524d20\u7684\u7535\u5f71\u548c\u5176\u7968\u623f\u6570\u636e\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_2\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_barchart/#case-two","title":"Case Two","text":""},{"location":"matplotlib/matplotlib_barchart/#background_1","title":"Background","text":"<ul> <li>\u56db\u90e8\u7535\u5f71\u5206\u522b\u57282017-09-14\u52302017-09-16\u4e09\u5929\u7684\u7968\u623f</li> </ul> <p>Python<pre><code>a = [\"\u7329\u7403\u5d1b\u8d773\uff1a\u7ec8\u6781\u4e4b\u6218\",\"\u6566\u523b\u5c14\u514b\",\"\u8718\u86db\u4fa0\uff1a\u82f1\u96c4\u5f52\u6765\",\"\u6218\u72fc2\"]\n</code></pre> Python<pre><code>b_16 = [15746,312,4497,319]\nb_15 = [12357,156,2045,168]\nb_14 = [2358,399,2358,362]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_barchart/#question_1","title":"Question","text":"<ul> <li>\u8bf7\u5c55\u73b0\u6bcf\u90e8\u7535\u5f71\u7684\u7968\u623f\uff0c\u540c\u65f6\u4e0e\u5176\u4ed6\u51e0\u90e8\u7535\u5f71\u7684\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4</li> </ul>"},{"location":"matplotlib/matplotlib_barchart/#solution_1","title":"Solution","text":"<p>Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: determine number of movies in the dataset a\n# --&gt; equals to number of bars needed for 9\u670814\u65e5\nx_14 = list(range(len(a)))\n\n# Step 3: to avoid the overlapping of each bar\nbar_width = 0.2\nx_15 = [i + bar_width for i in x_14]\nx_16 = [i + bar_width * 2 for i in x_14]\n\n# Step 3: plot mutiple bar chats \nplt.bar(x_14, b_14, width = bar_width, color = \"#FFB6C1\", label = \"9\u670814\u65e5\")\nplt.bar(x_15, b_15, width = bar_width, color = \"#FFD700\", label = \"9\u670815\u65e5\")\nplt.bar(x_16, b_16, width = bar_width, color = \"#B0E0E6\", label = \"9\u670816\u65e5\")\n\n# Step 4: set the x-axis (\u53ea\u9700\u8981\u5c45\u4e2d\u5bf9\u9f50\u5373\u53ef)\nplt.xticks(x_15, a, font_properties = my_font)\n\n# Step 5: add description\nplt.xlabel(\"Name\")\nplt.ylabel(\"Sales\")\nplt.title(\"2017\u5e74\u51859\u670814\u65e5\u523016\u65e5\u5185\u5730\u7535\u5f71\u7968\u623f\u5bf9\u6bd4\", fontproperties = my_font)\nplt.legend(loc = \"best\", prop = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_3\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_histogram/","title":"Matplotlib - Histogram","text":""},{"location":"matplotlib/matplotlib_histogram/#import-modules","title":"Import Modules","text":"Python<pre><code>import matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_histogram/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_histogram/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_histogram/#background","title":"Background","text":"<ul> <li>\u73b0\u6709250\u90e8\u7535\u5f71\u7684\u65f6\u957f(\u5217\u8868a)</li> </ul> Python<pre><code>a = \n[131,  98, 125, 131, 124, 139, 131, 117, 128, 108, 135, 138, 131, 102, 107, 114, 119, 128, \n   121, 142, 127, 130, 124, 101, 110, 116, 117, 110, 128, 128, 115,  99, 136, 126, 134,  95, \n   138, 117, 111,78, 132, 124, 113, 150, 110, 117,  86,  95, 144, 105, 126, 130,126, 130, 126, \n   116, 123, 106, 112, 138, 123,  86, 101,  99, 136,123, 117, 119, 105, 137, 123, 128, 125, 104, \n   109, 134, 125, 127,105, 120, 107, 129, 116, 108, 132, 103, 136, 118, 102, 120, 114,105, 115, \n   132, 145, 119, 121, 112, 139, 125, 138, 109, 132, 134,156, 106, 117, 127, 144, 139, 139, 119, \n   140,  83, 110, 102,123,107, 143, 115, 136, 118, 139, 123, 112, 118, 125, 109, 119, 133,112, 114, \n   122, 109, 106, 123, 116, 131, 127, 115, 118, 112, 135,115, 146, 137, 116, 103, 144,  83, 123, 111, \n   110, 111, 100, 154,136, 100, 118, 119, 133, 134, 106, 129, 126, 110, 111, 109, 141,120, 117, 106, \n   149, 122, 122, 110, 118, 127, 121, 114, 125, 126,114, 140, 103, 130, 141, 117, 106, 114, 121, 114, \n   133, 137,  92,121, 112, 146,  97, 137, 105,  98, 117, 112,  81,  97, 139, 113,134, 106, 144, 110, \n   137, 137, 111, 104, 117, 100, 111, 101, 110,105, 129, 137, 112, 120, 113, 133, 112,  83,  94, 146, \n   133, 101,131, 116, 111,  84, 137, 115, 122, 106, 144, 109, 123, 116, 111,111, 133, 150]\n</code></pre>"},{"location":"matplotlib/matplotlib_histogram/#question","title":"Question","text":"<ul> <li>\u5e0c\u671b\u7edf\u8ba1\u51fa\u8fd9\u4e9b\u7535\u5f71\u65f6\u957f\u7684\u5206\u5e03\u72b6\u6001(\u6bd4\u5982\u65f6\u957f\u4e3a100\u5206\u949f\u5230120\u5206\u949f\u7535\u5f71\u7684\u6570\u91cf\u3001\u51fa\u73b0\u7684\u9891\u7387)\u7b49\u4fe1\u606f</li> </ul>"},{"location":"matplotlib/matplotlib_histogram/#solution","title":"Solution","text":"<ul> <li>Numerical data --&gt; using histogram</li> </ul> <p>Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 10), dpi = 80)\n\n# Step 2: Calculate the number of bins needed for x-axis\n# us // for integer divison \nbin_width = 3 # based on mutiple trials (plot and adjust)\nnum_bins = (max(a) - min(a))//bin_width \n\n# Step 3: draw the bar chat \n# add density = Ture --&gt; turning the y-axis into percentage instead of absolute counts\nplt.hist(a, num_bins, density = True, color = \"orange\")\n\n# Step 4: set the x-axis\nplt.xticks(range(min(a), max(a) + bin_width, bin_width))\n\n# Step 5: add description\nplt.xlabel(\"Length of Film\")\nplt.ylabel(\"Frequency\")\nplt.title(\"250\u90e8\u7535\u5f71\u7684\u65f6\u957f\u5206\u5e03\u56fe\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_4.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_histogram/#case-two","title":"Case Two","text":""},{"location":"matplotlib/matplotlib_histogram/#background_1","title":"Background","text":"<ul> <li>\u7f8e\u56fd2004\u5e74\u4eba\u53e3\u666e\u67e5\u53d1\u73b0\u6709124 million\u7684\u4eba\u5728\u79bb\u5bb6\u76f8\u5bf9\u8f83\u8fdc\u7684\u5730\u65b9\u5de5\u4f5c\u3002\u6839\u636e\u4ed6\u4eec\u4ece\u5bb6\u5230\u4e0a\u73ed\u5730\u70b9\u6240\u9700\u8981\u7684\u65f6\u95f4,\u901a\u8fc7\u62bd\u6837\u7edf\u8ba1(\u6700\u540e\u4e00\u5217)\u51fa\u4e86\u4e0b\u8868\u7684\u6570\u636e</li> </ul> Python<pre><code>interval = [0,5,10,15,20,25,30,35,40,45,60,90]\nint_width = [5,5,5,5,5,5,5,5,5,15,30,60]\nquantity = [836,2737,3723,3926,3596,1438,3273,642,824,613,215,47]\n</code></pre> <ul> <li>\u4e0d\u80fd\u4f7f\u7528<code>plt.hist</code>\u56e0\u4e3a<code>plt.hist</code>\u9700\u8981raw data</li> </ul>"},{"location":"matplotlib/matplotlib_histogram/#question_1","title":"Question","text":"<ul> <li>\u8bf7\u5c55\u793a\u7f8e\u56fd2004\u5e74\u4eba\u53e3\u666e\u67e5\u4e2d\u4ece\u5bb6\u5230\u516c\u53f8\u6240\u9700\u65f6\u95f4\u7684\u5206\u5e03</li> </ul>"},{"location":"matplotlib/matplotlib_histogram/#solution_1","title":"Solution","text":"<ul> <li>\u7ed8\u5236\u6761\u5f62\u56fe\uff0c\u5e76\u8ba9\u6bcf\u6761bar\u90fd\u5e76\u5728\u4e00\u8d77\uff0c\u8fbe\u5230histogram\u7684\u6548\u679c </li> <li>bar chat has a default width of 0.8</li> </ul> <p>Python<pre><code>x = interval \ny = quantity \n\n# Step 1: Set the figure size\nplt.figure(figsize = (20, 10), dpi = 80)\n\n# Step 2: check the dimension of each dataset --&gt; make sure they are matched\n# for range(x), x must be integer not a list\nprint(len(interval), len(int_width), len(quantity))\n\n# Step 3: plot the bar chat\n# since there are 12 items in each dataset, so use range(12) for convenience \nplt.bar(range(12), y, width = 1)\n\n# Step 4: set the x-axis (\u5bf9\u5e94\u771f\u6b63\u7684interval\u523b\u5ea6)\n_x = [i - 0.5 for i in range(len(x)+1)]\n_xtick_labels = x + [150]\nplt.xticks(_x, _xtick_labels)\n\n# Step 5: add description\nplt.xlabel(\"Time to Work\")\nplt.ylabel(\"Number of People\")\nplt.title(\"\u7f8e\u56fd2004\u5e74\u4eba\u53e3\u666e\u67e5\uff1a\u4ece\u5bb6\u5230\u516c\u53f8\u6240\u9700\u65f6\u95f4\u7684\u5206\u5e03\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/distance.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/","title":"Matplotlib - Line Chat","text":""},{"location":"matplotlib/matplotlib_linechart/#import-modules","title":"Import Modules","text":"Python<pre><code>import matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_linechart/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS  </li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_linechart/#demo","title":"Demo","text":""},{"location":"matplotlib/matplotlib_linechart/#background","title":"Background","text":"<p>Python<pre><code>x = range(2, 26, 2)\n</code></pre> Python<pre><code>y = [15, 13, 14.5, 17, 20, 25, 26, 26, 24, 22, 18, 15]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_linechart/#solution","title":"Solution","text":"<p>Python<pre><code># set the size of graph\nplt.figure(figsize = (20, 8), dpi = 80) #width, hight\n\n# plot the graph \nplt.plot(x, y)\n\n# plot x and y axis with specific spacing\uff08\u533a\u95f4\uff09\nplt.xticks(range(2, 25))\n\n# with half-size spacing\nxtick_lables = [i/2 for i in range (4, 49)]\n\n# only showcase every-three marks\nplt.xticks(xtick_lables[::3])\n\n# for y-axis spacing\nplt.yticks(range(min(y), max(y)+1))\n\n#save the graph \nplt.savefig(\"./matplotlib/graph.png\")\n\n# display the graph \nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_linechart/#background_1","title":"Background","text":"<ul> <li>10\u70b9\u523012\u70b9\u6bcf\u5206\u949f\u7684\u6c14\u6e29\u53d8\u5316\u60c5\u51b5\u5982\u4e0b:</li> </ul> <p>Python<pre><code>x = range(0, 120)\n</code></pre> Python<pre><code>y = [random.randint(20, 35) for i in range(120)]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_linechart/#question","title":"Question","text":"<ul> <li>\u8bf7\u5c55\u793a10\u70b9\u523012\u70b9\u6bcf\u5206\u949f\u7684\u6c14\u6e29\u53d8\u5316\u60c5\u51b5</li> </ul>"},{"location":"matplotlib/matplotlib_linechart/#solution_1","title":"Solution","text":"<ul> <li>Since we are looking for trend and the data is numercial, we are going to use line chat</li> </ul> <p>Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot the temperature for every minutes between 10 to 12 pm\nplt.plot(x, y)\n\n# Step 3: set the x-axis (\u8868\u793a\u4e3a\u65f6\u95f4)\n_x = list(x)\nxtick_lables = [\"10\u70b9{}\u5206\".format(i) for i in range(60)]\nxtick_lables += [\"11\u70b9{}\u5206\".format(i) for i in range(60)]\n\n# align spacing, rotate the x-axis lables to certain degree, \u4f7fmatplotlib\u663e\u793a\u4e2d\u6587\nplt.xticks(_x[::3], xtick_lables[::3], rotation = 90, fontproperties = my_font)\n\n# Step 4: add description\nplt.xlabel(\"time\")\nplt.ylabel(\"temperature unit(\u02dac)\")\nplt.title(\"10\u70b9\u523012\u70b9\u6bcf\u5206\u949f\u7684\u6c14\u6e29\u53d8\u5316\u60c5\u51b5\", fontproperties = my_font)\n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/temp.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/#case-two","title":"Case Two","text":""},{"location":"matplotlib/matplotlib_linechart/#background_2","title":"Background","text":"<ul> <li>\u5047\u8bbe\u67d0\u4eba11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55\u5982\u4e0b:</li> </ul> <p>Python<pre><code>x = range(11, 31)\n</code></pre> Python<pre><code>y = [1, 0, 1, 1, 2, 4, 3, 2, 3, 4, 4, 5, 6, 5, 4, 3, 3, 1, 1, 1]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_linechart/#question_1","title":"Question","text":"<ul> <li>\u8bf7\u4f7f\u7528\u56fe\u8868\u5c55\u73b0\u6b64\u4eba11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55</li> </ul>"},{"location":"matplotlib/matplotlib_linechart/#solution_2","title":"Solution","text":"<p>Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot the figure \nplt.plot(x, y)\n\n# Step 3: set the x-axis\nxtick_lables = [\"{}\u5c81\".format(i) for i in x]\nplt.xticks(x, xtick_lables, fontproperties = my_font)\nplt.yticks(range(0, 9))\n\n# Step 4: add description\nplt.xlabel(\"age\")\nplt.ylabel(\"number of boyfriend\")\nplt.title(\"The Summary of One's Dating Histroy From Age of 11 to 30\")\n\n# to change the transparency of the grid\nplt.grid(alpha = 0.3)\n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/bf.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/#case-three","title":"Case Three","text":""},{"location":"matplotlib/matplotlib_linechart/#background_3","title":"Background","text":"<ul> <li>\u5047\u8bbe\u67d0\u4eba\u548c\u5176\u670b\u53cb11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55\u5982\u4e0b:</li> </ul> <p>Python<pre><code>x = range(11, 31)\n</code></pre> Python<pre><code>y = [1, 0, 1, 1, 2, 4, 3, 2, 3, 4, 4, 5, 6, 5, 4, 3, 3, 1, 1, 1]\n</code></pre> Python<pre><code>z = [1, 0, 3, 1, 2, 2, 3, 3, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_linechart/#question_2","title":"Question","text":"<ul> <li>\u8bf7\u4f7f\u7528\u56fe\u8868\u5c55\u73b0\u6b64\u4eba\u548c\u5176\u670b\u53cb11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55</li> </ul>"},{"location":"matplotlib/matplotlib_linechart/#solution_3","title":"Solution","text":"Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot the figure \n# \u989c\u8272\u53ef\u4ee5\u76f4\u63a5\u641c\u5341\u516d\u8fdb\u5236\u989c\u8272\u4ee3\u7801\nplt.plot(x, y, label = \"myself\", color = \"blue\")\nplt.plot(x, z, label = \"my friend\", color = \"red\", linestyle = \"--\")\n\n# Step 3: set the x-axis\nxtick_lables = [\"{}\u5c81\".format(i) for i in x]\nplt.xticks(x, xtick_lables, fontproperties = my_font)\nplt.yticks(range(0, 9))\n\n# Step 4: add description\nplt.xlabel(\"age\")\nplt.ylabel(\"number of boyfriend\")\nplt.title(\"The Summary of One's Dating Histroy From Age of 11 to 30\")\nplt.grid(alpha = 0.3, linestyle = \":\")\n\n# \u7ed8\u5236\u56fe\u4f8b and specify location\n# 0 = find the best loation automatically \uff08\u770b\u6e90\u7801\u67e5\u4f4d\u7f6e\u7684\u4ee3\u7801\uff09\nplt.legend(loc = 0) \n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/bf_2.png\")\nplt.show()\n</code></pre> <ul> <li>When hoping to use Chinese charaters in legend --&gt; <code>plt.legend(prop = my_font)</code></li> </ul>"},{"location":"matplotlib/matplotlib_scatter/","title":"Matplotlib - Scatter Plot","text":""},{"location":"matplotlib/matplotlib_scatter/#import-modules","title":"Import Modules","text":"Python<pre><code>import matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_scatter/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_scatter/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_scatter/#background","title":"Background","text":"<ul> <li>\u5317\u4eac2016\u5e743\u548c10\u6708\u4efd\u6bcf\u5929\u767d\u5929\u7684\u6700\u9ad8\u6c14\u6e29\uff08\u5206\u522b\u4f4d\u4e8e\u5982\u4e0b\u5217\u8868\uff09</li> </ul> <p>Python<pre><code>x_3 = range(1, 32)\n\nx_10 = range(51,82)\n</code></pre> Python<pre><code>y_3 = [11,17,16,11,12,11,12,6,6,7,8,9,12,15,14,17,18,21,16,17,20,14,15,15,15,19,21,22,22,22,23]\n\ny_10 = [26,26,28,19,21,17,16,19,18,20,20,19,22,23,17,20,21,20,22,15,11,15,5,13,17,10,11,13,12,13,6]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_scatter/#question","title":"Question","text":"<ul> <li>\u5bfb\u627e\u6c14\u6e29\u968f\u65f6\u95f4\uff08\u5929\uff09\u53d8\u5316\u7684\u67d0\u79cd\u89c4\u5f8b</li> </ul>"},{"location":"matplotlib/matplotlib_scatter/#solution","title":"Solution","text":"<ul> <li>Since we are looking for the correlation bettween temperature and time, we are going to use scatter plot</li> </ul> <p>Python<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot x aginst y for March and October\nplt.scatter(x_3, y_3, label = \"3\u6708\")\nplt.scatter(x_10, y_10, label = \"10\u6708\")\n\n# Step 3: set the x-axis\n_x = list(x_3) + list(x_10)\n_xtick_lables = [\"3\u6708{}\u65e5\".format(i) for i in x_3]\n_xtick_lables += [\"10\u6708{}\u65e5\".format(i - 50) for i in x_10]\nplt.xticks(_x[::3], _xtick_lables[::3], fontproperties = my_font, rotation = 45)\n\n# Step 4: add description\nplt.xlabel(\"Date\")\nplt.ylabel(\"Temperature\")\nplt.title(\"\u5317\u4eac2016\u5e743\u548c10\u6708\u4efd\u6c14\u6e29\u968f\u65f6\u95f4\u53d8\u5316\", fontproperties = my_font)\nplt.legend(loc = \"best\", prop = my_font)\n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/weather.png\")\nplt.show()\n</code></pre> </p>"},{"location":"me/contribution/","title":"Contribution","text":""},{"location":"me/contribution/#buy-me-a-cup-of-coffee","title":"Buy me a cup of coffee","text":""},{"location":"me/contribution/#money-collected-will-be-used-for","title":"Money collected will be used for:","text":"<ol> <li>Personal development </li> <li>Donation to public service activities</li> </ol>"},{"location":"me/contribution/#thank-you-for-your-generosity-and-support","title":"Thank you for your generosity and support!","text":""},{"location":"numpy/numpy_array/","title":"Numpy - About Array","text":""},{"location":"numpy/numpy_array/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\nimport random\n</code></pre>"},{"location":"numpy/numpy_array/#functions","title":"Functions","text":""},{"location":"numpy/numpy_array/#1-generate-array","title":"1. Generate Array","text":"<ul> <li><code>np.array()</code></li> <li><code>np.arange()</code></li> </ul> <p>Python<pre><code># \u65b9\u6cd51:\n\nt1 = np.array([1, 2, 3])\n</code></pre> Python<pre><code># \u65b9\u6cd52: \n\nt2 = np.array(range(10))\n</code></pre> Python<pre><code># \u65b9\u6cd53\uff1a\u5feb\u901f\u751f\u6210\u6570\u7ec4\n\nt3 = np.arange(10)\n</code></pre> Python<pre><code># Create an array, starting with 4 and ending with 10 exclusively with step \uff08\u6b65\u957f/\u95f4\u9694\uff09equals 2:\n\nt4 = t3 = np.arange(4, 10, 2) \n</code></pre></p>"},{"location":"numpy/numpy_array/#2-data-type","title":"2. Data Type","text":"<ul> <li><code>int</code> == integer</li> <li><code>float</code> == with decimals</li> <li><code>bool</code> == true/false</li> <li><code>complex</code> == \u590d\u6570<ul> <li>\u4f8b\uff1az=a+bi\uff0c\u5f53z\u7684\u865a\u90e8b\uff1d0\u65f6\uff0cz\u4e3a\u5b9e\u6570\uff1b\u5f53z\u7684\u865a\u90e8b\u22600\u65f6\uff0c\u5b9e\u90e8a\uff1d0\u65f6\uff0cz\u4e3a\u7eaf\u865a\u6570</li> </ul> </li> </ul>"},{"location":"numpy/numpy_array/#21-check-data-type","title":"2.1 Check data type","text":"Python<pre><code>t3.dtype\n\n# Output: int64 -- numpy\u4e2d\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u8ddf\u968f\u7535\u8111\u4f4d\u6570\u3002\n</code></pre>"},{"location":"numpy/numpy_array/#22-assign-data-type","title":"2.2 Assign data type","text":"<ul> <li>Why this is important --&gt; \u5f53\u5185\u5b58\u5c0f\u7684\u65f6\u5019\uff0c\u53ef\u7528numpy\u4fee\u6539data type\u4ece\u800c\u4fbf\u4e8e\u5b58\u50a8</li> </ul> Python<pre><code>Example: \n\nt5 = np.array(range(1, 4), dtype = float)\n\nt6 = np.array(range(1, 4), dtype = 'int8')\n\nt7 = np.array(range(1, 4), dtype = 'i2')\n\nt8 = np.array([1, 1, 0, 1, 0, 0], dtype = bool)\n</code></pre>"},{"location":"numpy/numpy_array/#23-adjust-data-type-for-existing-array","title":"2.3 Adjust data type (for existing array)","text":"Python<pre><code>t9 = t5.astype(\"int8\")\n</code></pre>"},{"location":"numpy/numpy_array/#3-decimals-fractionals","title":"3. Decimals (Fractionals)","text":"Python<pre><code># Generate an array with 10 random frasctionals - using random.random() --&gt; \u81ea\u52a8\u4ea7\u751f\u4e00\u4e2a\u5c0f\u6570:\n\nt10 = np.array([random.random() for i in range(10)])\n</code></pre>"},{"location":"numpy/numpy_array/#31-keep-certain-decimals-for-each-fractional-in-this-array","title":"3.1 Keep certain decimals for each fractional in this array","text":"<p>Python<pre><code># \u65b9\u6cd51:\n\nt11 = np.round(t10, 2)\n</code></pre> Python<pre><code># \u65b9\u6cd52:\n\nround(random.random(), 3)\n</code></pre></p>"},{"location":"numpy/numpy_array/#4-data-shape","title":"4. Data Shape","text":""},{"location":"numpy/numpy_array/#41","title":"4.1 \u4e00\u7ef4\u6570\u7ec4","text":"Python<pre><code>t12 = np.arange(12)\n\n# Check the data shape:\nt12.shape\n\n# output: (12,) -- \u4e00\u7ef4\u6570\u7ec4 == \u539f\u7ec4\n</code></pre>"},{"location":"numpy/numpy_array/#42","title":"4.2 \u4e8c\u7ef4\u6570\u7ec4","text":"Python<pre><code>t13 = np.array([[1, 2, 3], [4, 5, 6]])\n\nt13.shape \n\n# output: (2, 3) -- (# of rows, # of columns) -- \u4e8c\u7ef4\u6570\u7ec4\n</code></pre>"},{"location":"numpy/numpy_array/#43","title":"4.3 \u4e09\u7ef4\u6570\u7ec4","text":"Python<pre><code>t14 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nt14.shape\n\n# output: (2, 2, 3) -- (# of parts, # of rows, # of columns) -- \u4e09\u7ef4\u6570\u7ec4\n</code></pre>"},{"location":"numpy/numpy_array/#5-reshaping-data","title":"5. Reshaping Data","text":"<ul> <li><code>reshape()</code>\u6709\u8fd4\u56de\u503c\uff0c\u4e0d\u5bf9\u539farray\u8fdb\u884c\u4fee\u6539\u3002\u4e0d\u540c\u4e8e<code>extend</code>\u6216<code>update</code></li> </ul>"},{"location":"numpy/numpy_array/#51-reshape-an-existing-array-from-1d-to-2d","title":"5.1 Reshape an existing array from 1D to 2D","text":"Python<pre><code>t15 = np.arange(12)\n\nt15.reshape((3, 4))\n</code></pre>"},{"location":"numpy/numpy_array/#52-reshape-an-existing-array-from-1d-to-3d","title":"5.2 Reshape an existing array from 1D to 3D","text":"Python<pre><code>t16 = np.arange(24).reshape((2, 3, 4))\n</code></pre>"},{"location":"numpy/numpy_array/#53-reshape-an-existing-array-from-3d-to-2d","title":"5.3 Reshape an existing array from 3D to 2D","text":"Python<pre><code>t16.reshape(4, 6)\n</code></pre>"},{"location":"numpy/numpy_array/#54-reshape-an-existing-array-from-2d-to-1d","title":"5.4 Reshape an existing array from 2D to 1D","text":"Python<pre><code>t16.reshape(24,)\n</code></pre>"},{"location":"numpy/numpy_array/#55-reshape-an-unknown-shapesize-3d-array-to-1d","title":"5.5 Reshape an unknown shape/size 3D array to 1D","text":"<ul> <li><code>[0]</code> == # of parts</li> <li><code>[1]</code> == # of rows</li> <li><code>[2]</code> == # of columns</li> </ul> Python<pre><code>t17 = t16.reshape((t16.shape[0] * t16.shape[1] * t16.shape[2]),) \n</code></pre>"},{"location":"numpy/numpy_array/#56-reshape-an-unknown-shapesize-2d-array-to-1d","title":"5.6 Reshape an unknown shape/size 2D array to 1D","text":"<ul> <li><code>[0]</code> == # of rows</li> <li><code>[1]</code> == # of columns</li> </ul> Python<pre><code>t18 = t16.reshape((t16.shape[0] * t16.shape[1]),) \n</code></pre>"},{"location":"numpy/numpy_array/#57-reshape-array-with-any-shape-to-1d","title":"5.7 Reshape array with any shape to 1D","text":"Python<pre><code>t16.flatten()\n</code></pre>"},{"location":"numpy/numpy_array/#6-calculation-with-array","title":"6. Calculation With Array","text":""},{"location":"numpy/numpy_array/#61-array-vs-a-number","title":"6.1 Array vs. A number","text":"<ul> <li>Add/suntract/mutiply/divide: operation is on each number in an array --&gt; \u5e7f\u64ad\u673a\u5236</li> </ul> <p>Python<pre><code># Example 1: \n\nt15 + 2\n</code></pre> Python<pre><code># Example 2: \n\nt15/0\n\n# output: [nan inf inf inf inf inf inf inf inf inf inf inf] --&gt; nan == not a number; inf == infinity \n# numpy treat 0 as a very very small number, therefore 3/0 = \"inf\"\n</code></pre></p>"},{"location":"numpy/numpy_array/#62-array-vs-array-same-shape","title":"6.2 Array vs. Array (same shape)","text":"<ul> <li>Calculation between arrays with exact same shape: \u4e24\u4e2aarray\u4e2d\u5bf9\u5e94\u7684\u6570\u5b57\u8fdb\u884c\u8fd0\u7b97</li> </ul> <p>Python<pre><code>t19 = np.arange(100, 124).reshape(4, 6)\nt20 = np.arange(0,24).reshape(4, 6)\n</code></pre> Python<pre><code>t19 + t20\n</code></pre></p>"},{"location":"numpy/numpy_array/#63-array-vs-array-partially-different-shape","title":"6.3 Array vs. Array (partially different shape)","text":"<ul> <li>Calculation between arrays with partially different shape: \u5927array\u4e0e\u5c0farray\u7684shape\u76f8\u540c\u90e8\u5206\uff0c\u4e0e\u5c0farray\u5bf9\u5e94\u6570\u5b57\u8fdb\u884c\u8fd0\u7b97</li> </ul> <p>Python<pre><code># Example 1: \n\nt21 = np.arange(0, 6)\n\nt20 - t21\n\n# t20\u7684\u6bcf\u4e00\u884c\u4e0et21\u8fdb\u884c\u8fd0\u7b97  \n# t21 has a shape of (1, 6) --&gt; 1 row, 6 columns\n# t20 has a shape of (4, 6) --&gt; 4 row, 6 columns\n# output has a shape of (4, 6)\n</code></pre> Python<pre><code># Example 2: \n\nt22 = np.arange(4).reshape((4, 1)) # t22 has a shape of (4, 1) -- 4 row, 1 columns \n\nprint(t20 - t22)  \n\n# t20\u7684\u6bcf\u4e00\u5217\u4e0et22\u8fdb\u884c\u8fd0\u7b97  \n# t22 has a shape of (4, 1) --&gt; 4 row, 1 columns \n# output has a shape of (4, 6)\n</code></pre></p>"},{"location":"numpy/numpy_array/#64-array-vs-array-completely-different-shape","title":"6.4 Array vs. Array (completely different shape)","text":"<ul> <li>Calculation between arrays with completely different shape: not capable </li> </ul>"},{"location":"numpy/numpy_array/#65-more-examples","title":"6.5 More Examples","text":"<ol> <li>Arrays (shapes) that are capable for calculation:</li> <li>(3, 3, 2) vs (1, 2)</li> <li>(3, 3, 2) vs (1, 3)</li> <li>(3, 3, 2) vs (3, 1)</li> <li>(3, 3, 2) vs (3, 2)</li> <li> <p>(3, 3, 2) vs (3, 3)</p> </li> <li> <p>Arrays (shapes) that are not capable for calculation: </p> </li> <li>(3, 3, 3) vs (3, 2)</li> </ol>"},{"location":"numpy/numpy_exchange/","title":"Numpy - Exchange Rows or Columns","text":""},{"location":"numpy/numpy_exchange/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\nimport random\n</code></pre>"},{"location":"numpy/numpy_exchange/#data-source","title":"Data Source","text":"Python<pre><code># Create an array:\n\nt = np.arange(12, 24).reshape(3, 4)\n\n# Output: \n# [[12 13 14 15]\n# [16 17 18 19]\n# [20 21 22 23]]\n</code></pre>"},{"location":"numpy/numpy_exchange/#functions","title":"Functions","text":""},{"location":"numpy/numpy_exchange/#example-1-exchange-the-second-and-third-row","title":"Example 1: exchange the second and third row","text":"Python<pre><code>t[[1, 2], :] = t[[2, 1], :] \n\n# keep the columns intact\n\nprint(t)\n\n# Output: \n#[[12 13 14 15]\n#[20 21 22 23]\n#[16 17 18 19]]\n</code></pre>"},{"location":"numpy/numpy_exchange/#example-2-exchange-the-first-and-second-row","title":"Example 2: exchange the first and second row","text":"Python<pre><code>t[:, [0, 2]] = t[:, [2, 0]] \n\n# keep the rows intact\n\nprint(t)\n\n# Output: \n#[[14 13 12 15]\n#[22 21 20 23]\n#[18 17 16 19]]\n</code></pre>"},{"location":"numpy/numpy_infinity/","title":"Numpy - Infinity","text":""},{"location":"numpy/numpy_infinity/#_1","title":"\u524d\u8a00","text":"<ul> <li>Positive Infinity: <code>inf</code></li> <li>Negative Infinity: <code>-inf</code></li> <li>Data Type of Infinity --&gt; data type = float</li> <li>\u51fa\u73b0 infinity \u7684\u60c5\u666f\uff1a<ol> <li>18/0</li> <li>python \u4e2d\u4f1a\u76f4\u63a5\u62a5\u9519</li> <li>numpy \u4e2d\u4f1a\u51fa\u73b0 <code>inf</code> or <code>-inf</code></li> </ol> </li> </ul>"},{"location":"numpy/numpy_join_divide/","title":"Numpy - Join and divide Array","text":""},{"location":"numpy/numpy_join_divide/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\n\n# import the self-defined function for formating x and y-axis from another python file named \"test2_xy_formatter\"\nfrom test2_xy_formatter import x_millions_formatter \nfrom test2_xy_formatter import y_millions_formatter\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.ticker as ticker  \n</code></pre>"},{"location":"numpy/numpy_join_divide/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"numpy/numpy_join_divide/#data-source","title":"Data Source","text":"<ul> <li>Create two arrays with same shape</li> </ul> <p>Python<pre><code>t1 = np.arange(12).reshape(2, 6)\n\nt2 = np.arange(12,24).reshape(2, 6)\n</code></pre> Python<pre><code># read in CSV file \nus_file_path = \"./data/us_videos.csv\"\nuk_file_path = \"./data/gb_videos.csv\"\n\nus = np.loadtxt(us_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\nuk = np.loadtxt(uk_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\n\n# \u7981\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\uff08\u5168\u5c40\u8bbe\u7f6e: anything below this point\uff09\nnp.set_printoptions(suppress=True)\n</code></pre></p>"},{"location":"numpy/numpy_join_divide/#functions","title":"Functions:","text":""},{"location":"numpy/numpy_join_divide/#1-joint-two-arrays-vertically","title":"1. Joint two arrays vertically","text":"Python<pre><code># Adding rows to t1:\n\nnp.vstack((t1, t2)) \n\n# t1, t2 order matters\n</code></pre>"},{"location":"numpy/numpy_join_divide/#2-joint-two-arrays-horizontally","title":"2. Joint two arrays horizontally","text":"Python<pre><code># Adding columns to t1\n\nnp.hstack((t1, t2))\n\n# t1, t2 order matters\n</code></pre>"},{"location":"numpy/numpy_join_divide/#3-divide-an-array-vertically","title":"3. Divide an array vertically","text":"Python<pre><code># Separate rows from t1 -- (\u4e0evstack\u5bf9\u5e94):\n\nnp.vsplit(t1, [1])\n\n# [1] specify: split before the second row\n</code></pre>"},{"location":"numpy/numpy_join_divide/#4-divide-an-array-horizontally","title":"4. Divide an array horizontally","text":"Python<pre><code># Separate columns from t1 -- (\u4e0ehstack\u5bf9\u5e94):\n\nnp.hsplit(t2, [2])\n\n# [2] specify: split before the third column\n</code></pre>"},{"location":"numpy/numpy_join_divide/#5-split-an-array-into-equal-parts-or-at-specific-positions","title":"5. Split an array into equal parts or at specific positions","text":"Python<pre><code>np.split()\n</code></pre>"},{"location":"numpy/numpy_join_divide/#6-split-an-array-as-equally-as-possible","title":"6. Split an array as equally as possible","text":"Python<pre><code>np.array_split()\n</code></pre>"},{"location":"numpy/numpy_join_divide/#7-split-an-3d-array-along-the-depth","title":"7. Split an 3D array along the depth","text":"Python<pre><code>np.dsplit()\n</code></pre>"},{"location":"numpy/numpy_join_divide/#case-one","title":"Case One","text":""},{"location":"numpy/numpy_join_divide/#background","title":"Background","text":"<ul> <li>\u73b0\u5728\u6709\u5173\u4e8e\u82f1\u56fd\u548c\u7f8e\u56fd\u5404\u81ea1000\u591a\u4e2ayoutube\u89c6\u9891\u7684\u6570\u636e\uff0c\u5305\u62ec\u70b9\u51fb\u3001\u559c\u6b22\u3001\u4e0d\u559c\u6b22\u3001\u8bc4\u8bba\u6570\u91cf\u7b49\u4fe1\u606f</li> </ul>"},{"location":"numpy/numpy_join_divide/#question","title":"Question","text":"<ol> <li>Joint US and UK data files and make sure the source (us or uk) of data points is clear</li> <li>Display the relationship between \"likes\" and \"comment_count\" for UK and US Youtube</li> </ol>"},{"location":"numpy/numpy_join_divide/#solution","title":"Solution","text":""},{"location":"numpy/numpy_join_divide/#part-1-combine-us-and-uk-data-and-indicate-the-source-of-data-us-or-uk","title":"Part 1: combine us and uk data and indicate the source of data: us or uk","text":"<ul> <li>Add an additional column to each array (us and uk) to indicate the source of data: us or uk</li> <li>us == 0, uk == 1</li> </ul> Python<pre><code># Step 1: creat a column with all zeros (for US), and create a column with all ones (for UK)\n\n# define the shape of this column --&gt; num of rows: us.shape[0], num of cols: 1 \n\nus_zeros = np.zeros((us.shape[0], 1)) \nuk_ones = np.ones((uk.shape[0], 1))\n\n# Step 2: add the zero-column and one-column to us and uk (array), respectively \n\nus_m = np.hstack((us, us_zeros))\nuk_m = np.hstack((uk, uk_ones))\n\n# Step 3: combine the two new arrays \n\nus_uk = np.vstack((us_m, uk_m))\n</code></pre> <ul> <li>An alternative way to suppress scientific notation in arrays:   <code>us_zeros = np.zeros((us.shape[0], 1)).astype(int)</code> <code>uk_ones = np.ones((uk.shape[0], 1)).astype(int)</code></li> </ul>"},{"location":"numpy/numpy_join_divide/#part-2-generate-figure","title":"Part 2: generate figure","text":"<p>Python<pre><code># Step 1: define a function to distinguish us and uk data points by colors\n\ndef fill_colors(country):\n    colors = []\n    for i in country:\n        if i == 0: \n            colors.append(\"#FF8C00\")\n        else: \n            colors.append(\"#5F9EA0\")\n    return colors\n\n# Step 2: define a function to label us and uk data points\n\ndef fill_labels(country):\n    labels = []\n    for i in country:\n        if i == 0: \n            labels.append(\"United States\")\n        else: \n            labels.append(\"United Kingdom\")\n    return labels\n\n# \u533a\u5206\u6a21\u5757\u662f\u88ab\u5bfc\u5165\u8fd8\u662f\u76f4\u63a5\u8fd0\u884c\n\nif __name__ == '__main__':\n\n# Below are the local-only code\n\n# Step 3: plot data\n\n    # call the self-defined function to fill colors\n    country = us_uk[:, 4]\n    colors = fill_colors(country)\n    labels = fill_labels(country)\n\n    # perpare the x and y data sets\n    usuk_likes = us_uk[:, 1]\n    usuk_comments = us_uk[:, 3]\n\n    # set the figure size\n    plt.figure(figsize = (20, 8), dpi = 80)\n\n    # plot graph \n    # \u5206\u522b\u7ed8\u5236\u7f8e\u56fd\u548c\u82f1\u56fd\u7684\u6570\u636e\u70b9\n    for color, label in set(zip(colors, labels)):  # \u53bb\u91cd\n        mask = np.array(colors) == color  # \u521b\u5efa\u63a9\u7801\uff0c\u9009\u62e9\u5bf9\u5e94\u989c\u8272\u7684\u70b9\n        plt.scatter(usuk_likes[mask], usuk_comments[mask], color = color, label = label)\n\n    # suppress scientific notation for x and y-axis\n    plt.ticklabel_format(style = \"plain\")\n\n    # modify xticks and yticks\n    ax = plt.gca()\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(x_millions_formatter))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(y_millions_formatter))\n\n    # add figure descriptions\n    plt.xlabel(\"Number of likes\")\n    plt.ylabel(\"Number of comments\")\n    plt.title(\"The Relationship Between Likes and Number of Comments for Youtube in US and UK\")\n    plt.legend(loc = \"best\")\n    plt.grid(alpha = 0.3)\n\n    # save and display the figure\n    plt.savefig('./numpy/youtube_usuk.png')\n    plt.show()\n</code></pre> </p>"},{"location":"numpy/numpy_nan/","title":"Numpy - All About NaN","text":""},{"location":"numpy/numpy_nan/#_1","title":"\u524d\u8a00","text":"<ul> <li>NaN \u8868\u793a not a number </li> <li>\u51fa\u73b0 NaN\u7684\u60c5\u666f\uff1a<ol> <li>0/0</li> <li>data is missing</li> <li>data type \uff08dtype\uff09is float</li> <li>inappropriate calculation<ul> <li>eg. (infinity - infinity)</li> </ul> </li> </ol> </li> <li>np.nan \u4e0e np.nan \u4e0d\u76f8\u7b49<ul> <li><code>np.nan == np.nan</code> --&gt; output: False</li> <li><code>np.nan != np.nan</code> --&gt; output: True</li> </ul> </li> </ul>"},{"location":"numpy/numpy_nan/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\n</code></pre>"},{"location":"numpy/numpy_nan/#data-source","title":"Data Source","text":"<ul> <li>Create an array with the data point (3, 3) is NaN</li> </ul> Python<pre><code># Create an array: \nt1 = np.arange(24).reshape(4, 6)\n\n# Assign data point (3,3) to NaN:\nt4 = t1.astype(float)\nt4[3, 3] = np.nan \n</code></pre>"},{"location":"numpy/numpy_nan/#functions","title":"Functions","text":""},{"location":"numpy/numpy_nan/#1-array-nan","title":"1. \u5224\u65ad array\uff08\u6570\u7ec4\uff09\u4e2d NaN \u4e2a\u6570","text":"<ul> <li>\u5229\u7528 NaN \u7279\u6027</li> <li>\u4f8b\uff1a count numbers of NaN in t4</li> </ul> <p>Python<pre><code># \u65b9\u6cd51:\n\nnp.count_nonzero(t4 != t4)\n\n# \u56e0\u4e3a\u53ea\u6709 NaN \u65f6 t4 != t4 \u4e3a True \uff08= 1\uff09\uff0c\u5176\u4ed6\u4e3a False\n</code></pre> Python<pre><code># \u65b9\u6cd52: \n\nnp.count_nonzero(np.isnan(t4))\n</code></pre></p>"},{"location":"numpy/numpy_nan/#2-nan","title":"2. \u5224\u65ad\u5f53\u524d\u6570\u7ec4\u4e2d\u54ea\u4e2a\u6570\u503c\u4e3a NaN","text":"<ul> <li>\u5229\u7528 NaN \u7279\u6027</li> </ul> <p>Python<pre><code># \u65b9\u6cd51:\n\nnp.isnan(t4)\n\n# output\uff1adtype = bool \uff08In this example, it is a bool array)\n</code></pre> Python<pre><code># \u65b9\u6cd52: \n\nprint(t4 != t4)\n</code></pre></p>"},{"location":"numpy/numpy_nan/#3-nan","title":"3. NaN \u6709\u5173\u7684\u8ba1\u7b97","text":"<ul> <li>NaN \u548c\u4efb\u4f55\u503c\u8ba1\u7b97\uff0c\u7ed3\u679c\u90fd\u4e3a NaN</li> </ul>"},{"location":"numpy/numpy_nan/#demo-1","title":"Demo 1","text":"<p>Python<pre><code>np.sum(t4)\n\n# output = NaN\n</code></pre> Python<pre><code>np.sum(t4,axis = 0)\n\n# output = [ 0. 40. 44. nan 52. 56.]\n</code></pre></p>"},{"location":"numpy/numpy_nan/#demo-2","title":"Demo 2:","text":"<ul> <li>\u6307\u5b9a\u6c42\u54ea\u4e2a\u65b9\u5411\u7684\u548c - using axis</li> </ul> <p>Python<pre><code># Create a new array:\n\nt5 = np.arange(12).reshape(3, 4)\n</code></pre> Python<pre><code># \u6c42\u6bcf\u4e00\u5217\u7684\u548c (column total):\n\nnp.sum(t5, axis = 0)\n\n# shape of output is as same as each row \n</code></pre> Python<pre><code># \u6c42\u6bcf\u4e00\u884c\u7684\u548c (row total):\n\nnp.sum(t5, axis = 1)\n\n# shape of output is as same as each column\n</code></pre></p>"},{"location":"numpy/numpy_nan/#4-nan","title":"4. \u5904\u7406 NaN \u7684\u64cd\u4f5c","text":""},{"location":"numpy/numpy_nan/#1","title":"\u65b9\u6cd5 1","text":"<ul> <li>\u7528\u8be5\u5217/\u884c\u7684\u5747\u503c (or median) \u66ff\u6362 NaN <ul> <li>depends on whether we looking for column or row total</li> </ul> </li> </ul>"},{"location":"numpy/numpy_nan/#2-not-recommended","title":"\u65b9\u6cd5 2 (not recommended)","text":"<ul> <li>\u76f4\u63a5\u5220\u9664\u6709\u7f3a\u5931\u503c\u7684\u90a3\u4e00\u884c <ul> <li>\u56e0\u4e3a\u4e00\u884c\u88ab\u89c6\u4e3a\u4e00\u6761\u6570\u636e</li> </ul> </li> </ul>"},{"location":"numpy/numpy_nan/#array","title":"\u62d3\u5c55: \u5224\u65ad array\uff08\u6570\u7ec4\uff09\u4e2d \u975e\u96f6\u6570\u7684\u4e2a\u6570","text":"<ul> <li>Count numbers of nonzero in t4</li> </ul> Python<pre><code>t4[:,0] = 0\n\nnp.count_nonzero(t4)\n</code></pre>"},{"location":"numpy/numpy_nan_practice/","title":"Numpy - Handling Missing Data (NaN)","text":""},{"location":"numpy/numpy_nan_practice/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\n</code></pre>"},{"location":"numpy/numpy_nan_practice/#data-source","title":"Data Source","text":"Python<pre><code>t1 = np.arange(12).reshape(3, 4).astype(float)\nt1[1, 2:] = np.nan \n</code></pre>"},{"location":"numpy/numpy_nan_practice/#case-one-calculating-the-average","title":"Case One: calculating the average","text":"<ul> <li>Without asigning axis, opertaions will be on the entire array (all values in the array regardless its dimension)</li> </ul> <p>Python<pre><code># Define a function that calculate column mean:\n\ndef fill_ndarray(t1): # define a function that calculate column mean\n    for i in range (t1.shape[1]): # read through each column\n        temp_col = t1[:, i] # select the current column\n        nan_num = np.count_nonzero(np.isnan(temp_col))\n        if nan_num != 0: # there is nan\n            temp_nonan_col = temp_col[temp_col == temp_col] # select parts of the current column that are nan free --&gt; form a new array without nan (next step: find its mean)\n            temp_col[temp_col != temp_col] = temp_nonan_col.mean() # replace the current nan with the average \n    return t1\n</code></pre> Python<pre><code># Call out the self-defined function to fill the NaN with column mean: \n\nif __name__ == '__main__': # only run following code in this local file, not when importing self-define function in other file\n    t1 = np.arange(12).reshape(3, 4).astype(float)\n    t1[1, 2:] = np.nan \n    print(t1)   # output: [[ 0.  1.  2.  3.],[ 4.  5. nan nan],[ 8.  9. 10. 11.]]\n    t1 = fill_ndarray(t1)\n    print(t1)   # output: [[ 0.  1.  2.  3.],[ 4.  5.  6.  7.],[ 8.  9. 10. 11.]]\n                # 6 is the mean of (2 + 10), and 7 is the mean of (3 + 11)\n</code></pre></p>"},{"location":"numpy/numpy_other_func/","title":"Numpy - Other Functions","text":""},{"location":"numpy/numpy_other_func/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\nimport random\n</code></pre>"},{"location":"numpy/numpy_other_func/#data-source","title":"Data Source","text":"Python<pre><code>t1 = np.arange(15).reshape(3, 5)\n</code></pre>"},{"location":"numpy/numpy_other_func/#functions","title":"Functions","text":""},{"location":"numpy/numpy_other_func/#1-identify-the-location-of-the-max-and-min-of-an-array","title":"1. Identify the location of the max and min of an array","text":"<ul> <li><code>np.argmax()</code></li> <li><code>np.argmin()</code></li> </ul> <p>Python<pre><code>np.argmax(t1, axis = 0) \n\n# axis = 0 meaning: the output is same shape as a row --&gt; find the colum max or min \n# output: [2 2 2 2 2] --&gt; 2 meaning the column max is at second row\n</code></pre> Python<pre><code>np.argmin(t1, axis = 1) \n\n# axis = 1 meaning: the output is same shape as a column --&gt; find the row max or min \n# output: [0 0 0] --&gt; 0 meaning the row min is at the first column\n</code></pre></p>"},{"location":"numpy/numpy_other_func/#2-replace-multiple-data-points-of-same-value-in-an-array-by-a-different-value","title":"2. Replace multiple data points of same value in an array by a different value","text":"<p>Python<pre><code>t2 = np.eye(5)   \n\n# Replace ones by -1 for t2 array:\n\nt2[t2 == 1] = -1 \n</code></pre> Python<pre><code>np.argmin(t2, axis = 0)  \n\n# the column min is at [0 1 2 3 4]           \n</code></pre></p>"},{"location":"numpy/numpy_other_func/#3-create-an-array-with-all-zeros","title":"3. Create an array: with all zeros","text":"Python<pre><code>np.zeros((3, 4))\n</code></pre>"},{"location":"numpy/numpy_other_func/#4-create-an-array-with-all-onces","title":"4. Create an array: with all onces","text":"Python<pre><code>np.ones((3, 4))\n</code></pre>"},{"location":"numpy/numpy_other_func/#5-create-an-array-shape-of-square-and-the-diagonal-are-ones","title":"5. Create an array: shape of square and the diagonal are ones","text":"<ul> <li>The \"top-left-to-bottom-right\" diagonal are ones</li> </ul> Python<pre><code>np.eye(3) \n\n# \u62ec\u53f7\u4e2d\u76843\u8868\u793a\uff1a3 by 3 matrix\n</code></pre>"},{"location":"numpy/numpy_other_func/#6-create-an-array-with-random-float-numbers-01","title":"6. Create an array: with random float numbers (0~1)","text":"<ul> <li>Random float numbers (0~1) are evenly distributed </li> <li><code>np.random.rand(size)</code></li> </ul> Python<pre><code>np.random.rand(1, 2)\n</code></pre>"},{"location":"numpy/numpy_other_func/#7-create-an-array-with-random-float-numbers-negative-or-positive","title":"7. Create an array: with random float numbers (negative or positive)","text":"<ul> <li>Random float numbers (negative or positive) are normally distributed </li> <li>Standardized with mean = 0 and SD = 1</li> <li><code>np.random.randn(size)</code></li> </ul> Python<pre><code>np.random.randn(1, 2)\n</code></pre>"},{"location":"numpy/numpy_other_func/#8-create-an-array-with-random-numbers-defining-the-lowest-and-highest-number-and-shape","title":"8. Create an array: with random numbers, defining the lowest and highest number and shape","text":"<ul> <li><code>np.random.randint(low, high, (shape))</code></li> </ul> Python<pre><code>np.random.randint(10, 20, (4, 5))\n\n# 4\u884c5\u5217\u7684array\u4e2d\u662f10\uff5e20\u95f4\u7684\u968f\u673a\u6b63\u6570\n</code></pre>"},{"location":"numpy/numpy_other_func/#9-create-an-array-with-evenly-distributed-random-float-numbers-defining-the-lowest-and-highest-number-and-size","title":"9. Create an array: with evenly distributed random float numbers, defining the lowest and highest number and size","text":"<ul> <li>size is shape</li> <li><code>np.random.uniform(low, high, (size))</code></li> </ul> Python<pre><code>np.random.uniform(10, 20, (4,5))\n</code></pre>"},{"location":"numpy/numpy_other_func/#10-randomly-select-from-the-normal-distributed-sample-specifing-the-center-loc-sd-scale-and-shape-size","title":"10. Randomly select from the normal distributed sample, specifing the center = loc, SD = scale, and shape = size","text":"<ul> <li><code>np.random.normal(loc, scale, (size))</code></li> </ul>"},{"location":"numpy/numpy_other_func/#11-set-a-seed-so-that-each-time-generating-the-extact-same-random-array","title":"11. Set a seed so that each time generating the extact same random array \uff08\u524d\u63d0\u662f\u5728\u540c\u4e00\u53f0\u7535\u8111\u4e0a\uff09","text":"<ul> <li><code>np.random.seed(s)</code></li> </ul> Python<pre><code>np.random.seed(10)\n\nt = np.random.randint(0, 20, (3,4))\n</code></pre>"},{"location":"numpy/numpy_other_func/#12-view","title":"12. View","text":"<ul> <li><code>a = b</code> --&gt; a\u548cb\u5b8c\u5168\u4e0d\u590d\u5236\uff0ca\u548cb\u76f8\u4e92\u5f71\u54cd, b\u7684\u503c\u90fd\u8fdb\u5165a</li> <li><code>a = b[:]</code> --&gt; \u89c6\u56fe\u64cd\u4f5c\uff0ca\u548cb\u76f8\u4e92\u5f71\u54cd --&gt; if a change, b will change accordingly </li> </ul>"},{"location":"numpy/numpy_other_func/#13-copy","title":"13. Copy","text":"<ul> <li><code>a = b.copy()</code> --&gt; a\u548cb\u4e92\u4e0d\u5f71\u54cd</li> <li>Best practice: <code>b = b</code>\uff0c \u907f\u514d\u4ee5\u4e0a\u60c5\u51b5</li> </ul>"},{"location":"numpy/numpy_practice/","title":"Numpy - More Practice","text":""},{"location":"numpy/numpy_practice/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom matplotlib import font_manager \nimport matplotlib.ticker as ticker\n</code></pre>"},{"location":"numpy/numpy_practice/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"numpy/numpy_practice/#data-source","title":"Data Source","text":"Python<pre><code># Read in CSV file: \n\nus_file_path = \"./data/us_videos.csv\"\n\nuk_file_path = \"./data/gb_videos.csv\"\n\nus = np.loadtxt(us_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\n\nuk = np.loadtxt(uk_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\n</code></pre>"},{"location":"numpy/numpy_practice/#case-one","title":"Case One","text":""},{"location":"numpy/numpy_practice/#background","title":"Background","text":"<ul> <li>\u73b0\u5728\u6709\u5173\u4e8e\u82f1\u56fd\u548c\u7f8e\u56fd\u5404\u81ea1000\u591a\u4e2ayoutube\u89c6\u9891\u7684\u6570\u636e\uff0c\u5305\u62ec\u70b9\u51fb\u3001\u559c\u6b22\u3001\u4e0d\u559c\u6b22\u3001\u8bc4\u8bba\u6570\u91cf\u7b49\u4fe1\u606f</li> </ul>"},{"location":"numpy/numpy_practice/#question","title":"Question","text":"<ul> <li>Display the distribution of US Youtube comments </li> </ul>"},{"location":"numpy/numpy_practice/#solution","title":"Solution","text":"<ul> <li>Number of comments is numerical --&gt; use histogram </li> </ul> <p>Python<pre><code># Step 1: prepare data\n\n# only take out the column \"comment_count\" --&gt; the last column, -1 \n\nus_comments = us[:, -1] \n\n# since there are only few extremes, we will neglect them (observed by graph the entire data) --&gt; select \"comment_count\" &lt; 50000\n\nus_comments = us_comments[us_comments &lt;= 5000] \n</code></pre> Python<pre><code># Step 2: plot figure\n\n# Set the figure size\nplt.figure(figsize = (20, 10), dpi = 80)\n\n# Determine the bin width: print(us_comments.max(), us_comments.min())\nbin_width = 250\nbin_num = (us_comments.max() - us_comments.min())//bin_width\n\n# Plot the graph \nplt.hist(us_comments, bin_num, color = \"#8FBC8F\")\n\n# Fix x-axis \nplt.xticks(range(min(us_comments), max(us_comments) + bin_width, bin_width))\n\n# Add figure descriptions\nplt.xlabel(\"Number of comments\")\nplt.ylabel(\"Percentage\")\nplt.title(\"The Distribution of Youtube Comments in the US\")\nplt.grid(alpha = 0.3)\n\n# Save figure and print figure\nplt.savefig(\"./numpy/youtube_us\")\nplt.show()\n</code></pre></p> <ul> <li>\u4e5f\u53ef\u4ee5\u5c06bin_width\u8bbe\u7f6e\u6210\u975e\u56fa\u5b9a --&gt; \u901a\u8fc7\u4f20\u4e00\u4e2a\u5217\u8868\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57 --&gt; \u4ece\u800c\u89e3\u51b3\u6570\u636e\u201c\u524d\u5bc6\u540e\u677e\u201d\u7684\u95ee\u9898 </li> </ul> <p></p>"},{"location":"numpy/numpy_practice/#case-two","title":"Case Two","text":""},{"location":"numpy/numpy_practice/#background_1","title":"Background","text":"<ul> <li>\u6cbf\u7528case one\u7684\u6570\u636e\uff1a\u82f1\u56fd\u548c\u7f8e\u56fd\u5404\u81ea1000\u591a\u4e2ayoutube\u89c6\u9891\u7684\u6570\u636e\uff0c\u5305\u62ec\u70b9\u51fb\u3001\u559c\u6b22\u3001\u4e0d\u559c\u6b22\u3001\u8bc4\u8bba\u6570\u91cf\u7b49\u4fe1\u606f</li> </ul>"},{"location":"numpy/numpy_practice/#question_1","title":"Question","text":"<ul> <li>Display the relationship between \"likes\" and \"comment_count\" for UK Youtube</li> </ul>"},{"location":"numpy/numpy_practice/#solution_1","title":"Solution","text":"<ul> <li>Looking for relationship between two variables --&gt; use scatter plot</li> </ul> <p>Python<pre><code># Step 1: Prepare data\n\n# Only take out the \"likes\" and \"comment_count\" columns\nuk_likes = uk[:, 1]\nuk_comments = uk[:, 3]\n\n# Step 2: Plot graph\n\n# Set the figure size\nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Plot graph \nplt.scatter(uk_likes, uk_comments)\nplt.ticklabel_format(style = \"plain\")\n\n## Define a function to manage x-ticks\ndef x_millions_formatter(x, pos):\n    if x == 0: \n        return \"0\"\n    value = int(x/1000000) # based on observation, x (data values) are very large. It is approriate to keep it as integer\n    if value == 1:\n        return f'{value} million'\n    else:\n        return f'{value} millions'\n\n## Define a function to manage y-ticks\ndef y_millions_formatter(y, pos):\n    if y == 0: \n        return \"0\"\n    value = float(y/1000000)\n    if value == 1:\n        return f'{value:.1f} million' # keep only one decimal\n    else:\n        return f'{value:.1f} millions'\n\n## \u533a\u5206\u6a21\u5757\u662f\u88ab\u5bfc\u5165\u8fd8\u662f\u76f4\u63a5\u8fd0\u884c\n\nif __name__ == '__main__':\n\n# Below are the local-only code\n\n    # Modify xticks and yticks\n    ax = plt.gca()\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(x_millions_formatter))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(y_millions_formatter))\n\n# Add figure descriptions\nplt.xlabel(\"Number of likes\")\nplt.ylabel(\"Number of comments\")\nplt.title(\"The Relationship Between Likes and Number of Comments for UK Youtube\")\nplt.grid(alpha = 0.3)\n\n# Save figure and print figure\nplt.savefig('./numpy/youtube_uk.png')\nplt.show()\n</code></pre> </p> <ul> <li>\u62d3\u5c55\uff1asuppose there are few outliers in \"likes\", and we want to neglect them (observed by graph the entire array)<ol> <li>We will select \"likes\" &lt; 500000</li> <li>Select from the original array, because \"likes\" and \"comment_count\" need to be paired</li> <li><code>uk = uk[uk[:, 1] &lt;= 500000]</code></li> </ol> </li> </ul>"},{"location":"numpy/numpy_readdata/","title":"Numpy - Read Data","text":""},{"location":"numpy/numpy_readdata/#_1","title":"\u524d\u8a00","text":"<ul> <li>\u8bfb\u53d6\u6570\u636e\u4e00\u822c\u4e0d\u7528numpy\uff0c\u800c\u662fpandas<ul> <li>pandas\u66f4\u5f3a\u5927</li> </ul> </li> <li>Data file\u7684\u683c\u5f0f\u901a\u5e38\u662fCSV file (Comma-Separated Value)<ul> <li>\u57fa\u672c\u8bed\u6cd5\uff1a<code>np.loadtxt(fname, dtype = np.float, delimiter = None, skiprows = 0, usecols = None, unpack = False)</code></li> <li><code>delimiter</code> --&gt; \u5206\u9694\u5b57\u7b26\u4e32: \u9ed8\u8ba4\u4e3a\u7a7a\u683c\uff0c\u53ef\u6539\u4e3a\u9017\u53f7</li> <li><code>skiprows</code> --&gt; \u8df3\u8fc7\u524dX\u884c</li> <li><code>usecols</code> --&gt; \u8bfb\u53d6\u6307\u5b9a\u7684\u5217</li> <li><code>unpack</code> --&gt; \u8f6c\u5236: \u5c06\u884c\u8f6c\u6210\u5217\uff0c\u5c06\u5217\u8f6c\u6210\u884c\u3002 \u9ed8\u8ba4 unpack = False</li> </ul> </li> </ul>"},{"location":"numpy/numpy_readdata/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\n</code></pre>"},{"location":"numpy/numpy_readdata/#data-source","title":"Data Source","text":"<p>Python<pre><code># Read CSV file\nus_file_path = \"./data/us_videos.csv\"\nuk_file_path = \"./data/gb_videos.csv\"\n\nus = np.loadtxt(us_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\nuk = np.loadtxt(uk_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\n</code></pre> Python<pre><code># \u81ea\u5efa\u6570\u7ec4\nt1 = np.arange(24).reshape(4, 6)\nprint(t1)\n</code></pre></p>"},{"location":"numpy/numpy_readdata/#functions","title":"Functions","text":""},{"location":"numpy/numpy_readdata/#1-transpose","title":"1. Transpose \uff08\u8f6c\u5236\uff09","text":"Python<pre><code># \u65b9\u6cd51:\n\nt1.transpose()\n</code></pre> Python<pre><code># \u65b9\u6cd52\uff1a\n\nt1.T\n</code></pre>"},{"location":"numpy/numpy_readdata/#2-extract-row-andor-columns","title":"2. Extract row and/or columns","text":"<ul> <li>\u57fa\u672c\u8bed\u6cd5\uff1a<code>data[rows, columns]</code></li> </ul>"},{"location":"numpy/numpy_readdata/#21-extract-one-row","title":"2.1 Extract one row","text":"<p>Python<pre><code># Extract the third row:\n\nus[2]\n</code></pre> Python<pre><code># An alternative way:\n\nus[2, :]\n</code></pre></p>"},{"location":"numpy/numpy_readdata/#22-extract-mutiple-rows","title":"2.2 Extract mutiple rows","text":"<p>Python<pre><code># Extract second and thrid rows\uff1a\n\nus[1:3]\n</code></pre> Python<pre><code># Extract every row after the thrid row\uff1a\n\nus[2:]\n</code></pre> Python<pre><code># Extract multiple but inconsistant rows\uff1a\n\nus[[2, 8, 10]]\n</code></pre></p>"},{"location":"numpy/numpy_readdata/#23-extract-one-column","title":"2.3 Extract one column","text":"Python<pre><code># Extract the thrid column:\n\nus[:, 2]\n\n# :\u8868\u793a\u5bf9rows\u4e0d\u505a\u7279\u522b\u5904\u7406\n</code></pre>"},{"location":"numpy/numpy_readdata/#24-extract-multiple-columns","title":"2.4 Extract multiple columns","text":"<p>Python<pre><code># Extracting the second and third columns:\n\nus[:, 1:3]\n</code></pre> Python<pre><code># Extract every column after the thrid column:\n\nus[:, 2:]\n</code></pre> Python<pre><code># Extract multiple but inconsistant columns:\n\nus[:, [0, 1, 3]]\n</code></pre></p>"},{"location":"numpy/numpy_readdata/#25-extract-one-row-and-one-column","title":"2.5 Extract one row and one column","text":"<ul> <li>This is equivalent to extracting a data point</li> </ul> Python<pre><code>us[2, 3] \n</code></pre>"},{"location":"numpy/numpy_readdata/#26-extract-multiple-rows-and-multiple-columns-continuous","title":"2.6 Extract multiple rows and multiple columns (continuous)","text":"Python<pre><code>us[2:5, 1:4]\n</code></pre>"},{"location":"numpy/numpy_readdata/#27-extract-multiple-rows-and-multiple-columns-inconsistant","title":"2.7 Extract multiple rows and multiple columns (inconsistant)","text":"<ul> <li>This is equivalent to extracting mutiple data points</li> </ul> Python<pre><code># \u53d6 matrix\uff08\u6570\u9635\uff09\u4e2d\u4e0d\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9:\n\nus[[0, 2], [0, 1]] \n\n# \u70b9\u5750\u6807: \u7b2c\u4e00\u884c\u7b2c\u4e09\u5217\uff080\uff0c 2\uff09\uff0c\u7b2c\u4e00\u884c\u7b2c\u4e8c\u5217 \uff080\uff0c 1\uff09\n</code></pre>"},{"location":"numpy/numpy_readdata/#3","title":"3. \u53d6\u6b65\u957f","text":"<ul> <li>\u4f8b\uff1a<code>[:2]</code></li> </ul> <p>Python<pre><code># \u6bcf\u4e24\u5217\u4e00\u53d6\u503c\uff1a\n\nus[:, 2::2]\n\n# :2 \u8868\u793a step == 2 \n</code></pre> Python<pre><code># Star from the second column, and step is 2 (including the fourth column):\n\nus[:, 1::2]\n</code></pre></p>"},{"location":"numpy/numpy_readdata/#4-manipulating-data","title":"4. Manipulating Data","text":""},{"location":"numpy/numpy_readdata/#41-manipulate-data-points-all-at-once","title":"4.1 Manipulate data points all at once","text":"<p>Python<pre><code># Original data: \n\nus[1,1:4]\n</code></pre> Python<pre><code># Assign 0 to all: \n\nus[1,1:4] = 0 \n</code></pre></p>"},{"location":"numpy/numpy_readdata/#42-manipulate-data-points-with-conditions","title":"4.2 Manipulate data points with conditions","text":""},{"location":"numpy/numpy_readdata/#421-manipulate-data-points-that-are-less-than-or-equal-to-10","title":"4.2.1 Manipulate data points that are less than or equal to 10:","text":"Python<pre><code>t1[t1 &lt;= 10] = 3\n</code></pre> <ul> <li>\u539f\u7406: <ul> <li><code>t1 &lt; 10</code> gives an output that has a dtype = bool (True or False) </li> <li><code>t1[t1 &lt;= 10] = 3</code> --&gt; \u5c06 t1 matrix \u4e2d True \u7684\u4f4d\u7f6e\u7edf\u7edf\u66ff\u6362\u4e3a 3 </li> </ul> </li> </ul>"},{"location":"numpy/numpy_readdata/#422-replace-t1-10-with-0-and-t1-10-with-10","title":"4.2.2 Replace t1 &lt; 10 with 0 and t1 &gt; 10 with 10","text":"<ul> <li>\u4e00\u4e2a\u4e34\u754c\u70b9</li> </ul> Python<pre><code>np.where(t1 &lt; 10, 0, 10)\n</code></pre> <ul> <li>\u89e3\u6790: if t1 &lt; 10, then t1 = 0, otherwise t1 = 10</li> </ul>"},{"location":"numpy/numpy_readdata/#423-replace-t1-10-with-10-and-t1-18-with-18","title":"4.2.3 Replace t1 &lt; 10 with 10 and t1 &gt; 18 with 18","text":"<ul> <li>\u4e24\u4e2a\u4e34\u754c\u70b9</li> </ul> Python<pre><code># \u7528 clip \u88c1\u526a:\n\nt1.clip(10, 18)\n</code></pre>"},{"location":"numpy/numpy_readdata/#5-nan","title":"5. \u8d4b\u503c NaN","text":"<ul> <li>data must be float before converting to NaN</li> </ul> Python<pre><code># \u8d4b\u503c data point (3, 3) with NaN:\n\nt4 = t1.astype(float)\nt4[3, 3] = np.nan \n</code></pre>"},{"location":"numpy/numpy_readdata/#footnotes","title":"Footnotes","text":"<ul> <li> <p>Using a divider when coding can achieve better visualization and clarity </p> </li> <li> <p>Example:</p> </li> </ul> Python<pre><code>print(\"*\"*100)\n</code></pre>"},{"location":"numpy/numpy_stats/","title":"Numpy - \u5e38\u89c1\u7684\u7edf\u8ba1\u65b9\u6cd5","text":""},{"location":"numpy/numpy_stats/#import-modules","title":"Import Modules","text":"Python<pre><code>import numpy as np\n</code></pre>"},{"location":"numpy/numpy_stats/#statistical-functions","title":"Statistical Functions","text":"<ul> <li>Without asigning axis, opertaions will be on the entire array (all values in the array regardless its dimension)</li> </ul>"},{"location":"numpy/numpy_stats/#1-sum","title":"1. Sum","text":"<p>Python<pre><code>\u65b9\u6cd51\uff1b\n\nnp.sum(t)\n</code></pre> Python<pre><code>\u65b9\u6cd52:\n\nt.sum \n\n# t is an array\n</code></pre></p>"},{"location":"numpy/numpy_stats/#demo","title":"Demo","text":"<p>Python<pre><code># Create an array\uff1a\n\nt1 = np.arange(24).reshape(4, 6)\nt4 = t1.astype(float)\n</code></pre> Python<pre><code># \u6c42\u6bcf\u4e00\u5217\u7684\u548c (column total):\n\nt4.sum(axis = 0)\n</code></pre></p>"},{"location":"numpy/numpy_stats/#2-mean","title":"2. Mean","text":"Python<pre><code>t4.mean(axis = 0)\n</code></pre>"},{"location":"numpy/numpy_stats/#3-median","title":"3. Median","text":"Python<pre><code>np.median(t4, axis = 0)\n</code></pre>"},{"location":"numpy/numpy_stats/#4-max","title":"4. Max","text":"Python<pre><code>t4.max(axis = 0)\n</code></pre>"},{"location":"numpy/numpy_stats/#5-min","title":"5. Min","text":"Python<pre><code>t4.min(axis = 0)\n</code></pre>"},{"location":"numpy/numpy_stats/#6-range-max-min","title":"6. Range: Max - Min","text":"Python<pre><code>np.ptp(t4, axis = 0)\n\n# ptp: peak-to-peak\n</code></pre>"},{"location":"numpy/numpy_stats/#7-standard-deviation","title":"7. Standard Deviation","text":"<ul> <li>Describe the distribution/dispersion of sample mean</li> </ul> Python<pre><code>t4.std(axis = 0)\n</code></pre>"},{"location":"pandas/pandas_count_str/","title":"Pandas - Count String","text":""},{"location":"pandas/pandas_count_str/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"pandas/pandas_count_str/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"pandas/pandas_count_str/#data-source","title":"Data Source","text":"Python<pre><code>df = pd.read_csv(\"data/IMDB-Movie-Data.csv\")\n\nprint(df[\"Genre\"])\n</code></pre>"},{"location":"pandas/pandas_count_str/#case","title":"Case: \u7edf\u8ba1\u7535\u5f71\u5206\u7c7b\u60c5\u51b5","text":"<ul> <li>\u601d\u8def\uff1a  </li> </ul> Text Only<pre><code>Given: Genre  Movie_title\n       \"a, b\"  XXXXX\n       \"b, f\"  NNNNN\n       \"y z a\" PPPPP\nManipulate to: [a, b, f, y, z]\n                1  1  0  0  0\n                0  1  1  0  0\n                1  0  0  1  1  \n</code></pre>"},{"location":"pandas/pandas_count_str/#solution","title":"Solution","text":"Python<pre><code># Step 1: \u7b80\u5386\u7edf\u8ba1\u5217\u8868\n\ntemp_list = df[\"Genre\"].str.split(\",\").tolist() # output: [[],[],[]]\n\ngenre_list = list(set(i for j in temp_list for i in j)) \n</code></pre> <ul> <li>\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff1a                </li> <li>\u904d\u5386 temp_list \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b50\u5217\u8868 j\uff0c\u7136\u540e\u518d\u904d\u5386\u5b50\u5217\u8868 j \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20 i\uff0c\u6700\u7ec8\u751f\u6210\u4e00\u4e2a\u5305\u542b\u6240\u6709 i \u7684\u8fed\u4ee3\u5668\u3002                    </li> <li>\u5c06\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u96c6\u5408\uff08set\uff09\u3002 \u96c6\u5408\u7684\u7279\u6027\uff1a\u4f1a\u81ea\u52a8\u53bb\u91cd\uff0c\u56e0\u6b64\u7ed3\u679c\u4e2d\u53ea\u5305\u542b\u552f\u4e00\u7684\u5143\u7d20               </li> <li>\u5c06\u96c6\u5408\u8f6c\u6362\u56de\u5217\u8868\uff0c\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u6240\u6709\u552f\u4e00\u5143\u7d20\u7684\u5217\u8868 genre_list          </li> </ul> <p>Python<pre><code># Step 2: \u6784\u9020\u5168\u90e8\u4e3a0\u7684dataframe: \u884c\u6570\u7b49\u540c\u4e8e\u539f\u59cb\u6570\u636e\u4e2d\u7684\u884c\u6570\uff08\u7535\u5f71\u7684\u4e2a\u6570\uff09\uff0c\u5217\u6570\u7b49\u540c\u4e8e\u4e0d\u91cd\u590d\u7684genre\u4e2a\u6570\u3002column index\uff1acolumns = genre_list\n\nzero_df = pd.DataFrame(np.zeros((df.shape[0], len(genre_list))), columns = genre_list)\n</code></pre> Python<pre><code># Step 3: \u6839\u636e\u6bcf\u4e2a\u7535\u5f71genre\u7684\u4fe1\u606f\uff0c\u7ed9zero_df\u8d4b\u503c\uff08=1\uff09\n\nfor i in range(df.shape[0]):\n    zero_df.loc[i,temp_list[i]] = 1 # \u5bf9\u5e94\u539f\u59cb\u6570\u636e\u7684\u6bcf\u4e00\u884ci\uff1b\u5bf9\u5e94temp_list\u6bcf\u884c\u91cc\u51fa\u73b0\u7684genre\u5217 --&gt; \u7136\u540e\u8d4b\u503c1\n\n# \u8bbe\u7f6e pandas \u6253\u5370\u9009\u9879\uff0c\u53d6\u6d88\u622a\u65ad --&gt; \u4ece\u800c\u6253\u5370\u6240\u6709\u7684\u5217\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\n\nprint(zero_df.head(10))\n</code></pre> Python<pre><code># Step 4: \u7edf\u8ba1\u6bcf\u4e2agenre\u7684\u7535\u5f71\u4e2a\u6570\u4e4b\u548c\ncount_movie = zero_df.sum(axis = 0) # axis - 0 --&gt; \u6c42\u7684\u662fcolumn total\n</code></pre> Python<pre><code># Step 5: \u6309\u7167count\u591a\u5c11\u6392\u5e8f\ncount_genre = count_movie.sort_values()\n</code></pre> Python<pre><code># Step 6; \u7ed8\u5236genre\u7684\u5206\u5e03\u56fe\nplt.figure(figsize = (20, 8), dpi = 80)\n\nplt.bar(count_genre.index, count_genre.values, color = \"#87CEEB\")\n\nplt.xticks(range(len(count_genre.index)), count_genre.index)\nplt.xlabel(\"Movie Genre\")\nplt.ylabel(\"Number of Movies\")\nplt.title(\"2006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u7c7b\u578b\u5206\u5e03\", fontproperties = my_font)\n\nplt.savefig(\"./pandas/genre.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_dataframe/","title":"Pandas - DataFrame","text":""},{"location":"pandas/pandas_dataframe/#_1","title":"\u524d\u8a00","text":"<ul> <li>Dataframe is two dimensional </li> </ul>"},{"location":"pandas/pandas_dataframe/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd \nimport numpy as np\nfrom pymongo import MongoClient\n</code></pre>"},{"location":"pandas/pandas_dataframe/#functions","title":"Functions","text":""},{"location":"pandas/pandas_dataframe/#1-create-a-dataframe","title":"1. Create a DataFrame","text":"Python<pre><code>df = pd.DataFrame(np.arange(12).reshape(3, 4))\n\n# Output: 0  1   2   3 --&gt; this is column index -- called columns, axis = 1\n     # 0  0  1   2   3\n     # 1  4  5   6   7\n     # 2  8  9  10  11\n     # |\n# this is row index -- called index, axis = 0\n</code></pre>"},{"location":"pandas/pandas_dataframe/#2-create-a-dataframe-self-define-index-and-columns","title":"2. Create a DataFrame: self-define index and columns","text":"Python<pre><code>df_1 = pd.DataFrame(np.arange(12).reshape(3, 4), index = list(\"abc\"), columns = list(\"wxyz\"))\n</code></pre>"},{"location":"pandas/pandas_dataframe/#3-create-a-dataframe-using-dictionary","title":"3. Create a dataframe: using dictionary","text":"<p>Python<pre><code>d1 = {\"name\":[\"xiaoming\", \"xiaowang\"], \"age\":[20, 32], \"tel\":[10086, 10010]}\n\ndf_2 = pd.DataFrame(d1)\n</code></pre> Python<pre><code>d2 = [{\"name\":\"xiaoming\", \"age\":20, \"tel\":10086}, {\"name\":\"xiaowang\", \"age\":32, \"tel\":10010}, {\"name\":\"xiaohe\", \"age\":22, \"tel\":10099}]\n\ndf_3 = pd.DataFrame(d2)\n</code></pre> Python<pre><code>d3 = [{\"name\":\"xiaoming\", \"age\":20, \"tel\":10086}, {\"name\":\"xiaowang\", \"age\":32, \"tel\":10010}, {\"name\":\"xiaohe\", \"age\":22}]\n\ndf_4 = pd.DataFrame(d3)\n\nprint(df_4) # Output: \u6ca1\u6709\u4f20\u503c\u7684\u5730\u65b9\u4f1a\u663e\u793aNaN\n</code></pre></p>"},{"location":"pandas/pandas_dataframe/#4-features-in-dataframe","title":"4.  Features in DataFrame","text":""},{"location":"pandas/pandas_dataframe/#1-check-index-row-index","title":"1. Check index (row index)","text":"Python<pre><code>df_2.index\n</code></pre>"},{"location":"pandas/pandas_dataframe/#2-check-columns-column-index","title":"2. Check columns (column index)","text":"Python<pre><code>df_2.columns\n</code></pre>"},{"location":"pandas/pandas_dataframe/#3-check-values-values-only","title":"3. Check values (values only)","text":"Python<pre><code>df_2.values \n# ndarray\n</code></pre>"},{"location":"pandas/pandas_dataframe/#4-check-the-shape-of-dataframe","title":"4. Check the shape of dataframe","text":"Python<pre><code>df_2.shape\n</code></pre>"},{"location":"pandas/pandas_dataframe/#5-check-data-type-of-values-for-each-column-in-dataframe","title":"5. Check data type of values (for each column) in dataframe","text":"Python<pre><code>df_2.dtypes\n</code></pre>"},{"location":"pandas/pandas_dataframe/#6-check-the-dimension-of-dataframe","title":"6. Check the dimension of dataframe","text":"Python<pre><code>df_2.ndim\n</code></pre>"},{"location":"pandas/pandas_dataframe/#7-show-the-first-few-rows","title":"7. Show the first few rows","text":"<p>Python<pre><code>df_2.head\n\n# Default: the first five rows \n</code></pre> Python<pre><code>df_2.head(1) # show the first row\n</code></pre></p>"},{"location":"pandas/pandas_dataframe/#8-show-the-last-few-rows","title":"8. Show the last few rows","text":"<p>Python<pre><code>print(df_2.tail)\n\n# default: the last five rows \n</code></pre> Python<pre><code>df_2.tail(2) # show the second to last row\n</code></pre></p>"},{"location":"pandas/pandas_dataframe/#9-present-the-description-for-a-datframe","title":"9. Present the description for a datframe","text":"Python<pre><code>df_2.info()\n</code></pre>"},{"location":"pandas/pandas_dataframe/#10-present-statistical-description-of-a-dataframe-mean-sd-min-max-median-first-and-thrid-quartile","title":"10. Present statistical description of a dataframe (mean, SD, min, max, median, first and thrid quartile)","text":"Python<pre><code>df_2.describe()\n\n# Only for data type == int or float \n</code></pre>"},{"location":"pandas/pandas_group/","title":"Pandas - Group and \u805a\u5408Functions","text":""},{"location":"pandas/pandas_group/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd \nimport numpy as np\n</code></pre>"},{"location":"pandas/pandas_group/#data-source","title":"Data Source","text":"<p>Python<pre><code>df = pd.read_csv(\"data/starbucks.csv\")\n\n# \u8bbe\u7f6e pandas \u6253\u5370\u9009\u9879\uff0c\u53d6\u6d88\u622a\u65ad --&gt; \u4ece\u800c\u6253\u5370\u6240\u6709\u7684\u5217\npd.set_option(\"display.max_columns\", None)\n</code></pre> Python<pre><code># Check basic info about this dataset \n\nprint(df.info())\nprint(df.head(10))\n</code></pre></p>"},{"location":"pandas/pandas_group/#functions","title":"Functions","text":""},{"location":"pandas/pandas_group/#1-group","title":"1. Group","text":"<p>Python<pre><code># Step 1: group the data by country \n\ncountry_group = df.groupby(by = \"Country\")\n\n# print(country_group ) # output: DataFrameGroupBy --&gt; \u53ef\u7528\u4e8e\u904d\u5386&amp;\u8c03\u7528\u805a\u5408\u65b9\u6cd5\n</code></pre> Python<pre><code># Step 2: \u904d\u5386country_group (\u5143\u7ec4: \u7d22\u5f15\uff08=\u5206\u7ec4\u7684\u503c) + \u5206\u7ec4\u540e\u7684dataframe\uff09\nfor i, j in country_group: \n    print(i)\n    print(\"-\"*100)\n    print(j, type(j)) # j is dataframe\n</code></pre> Python<pre><code># Step 3: eg.\u53ea\u8bfb\u53d6\u82f1\u56fd\u6570\u636e\n\ndf[df[\"Country\"] == \"US\"]\n</code></pre> Python<pre><code># Step 4: \u8c03\u7528\u805a\u5408\u65b9\u6cd5 --&gt; \u7edf\u8ba1\u6bcf\u4e2a\u56fd\u5bb6\u7684\u6bcf\u5217\u7684\u4e2a\u6570\n\ncountry_group.count()\n\n# \u53ea\u7edf\u8ba1\u7279\u5b9acolumn:\ncountry_group[\"Brand\"].count()\n</code></pre></p>"},{"location":"pandas/pandas_group/#2-functions","title":"2. \u805a\u5408\u7684Functions","text":"<ul> <li><code>count()</code> </li> <li><code>sum()</code> </li> <li><code>mean()</code> </li> <li><code>median()</code> </li> <li><code>std()</code> </li> <li><code>var()</code> </li> <li><code>min()</code> </li> <li><code>max()</code> </li> </ul>"},{"location":"pandas/pandas_group/#case-one","title":"Case One:","text":""},{"location":"pandas/pandas_group/#background","title":"Background:","text":"<ul> <li>\u73b0\u6709\u5173\u4e8e\u5168\u7403\u661f\u5df4\u514b\u7684\u4fe1\u606f</li> </ul>"},{"location":"pandas/pandas_group/#question","title":"Question","text":"<ul> <li>\u7f8e\u56fd\u7684\u661f\u5df4\u514b\u6570\u91cf\u548c\u4e2d\u56fd\u7684\u6bd4\u8f83\uff0c\u8c01\u66f4\u591a\uff1f</li> </ul>"},{"location":"pandas/pandas_group/#solution","title":"Solution","text":"Python<pre><code>star_by_country = country_group[\"Brand\"].count()\n\nus_star = star_by_country[\"US\"]\n\n\ncn_star = star_by_country[\"CN\"]\n\n# Based on comparison, US has more Starbucks\n</code></pre>"},{"location":"pandas/pandas_group/#case-two","title":"Case Two","text":""},{"location":"pandas/pandas_group/#background_1","title":"Background:","text":"<ul> <li>\u6cbf\u7528\u5168\u7403\u661f\u5df4\u514b\u7684\u4fe1\u606f</li> </ul>"},{"location":"pandas/pandas_group/#question_1","title":"Question","text":"<ul> <li>\u4e2d\u56fd\u6bcf\u4e2a\u7701\u7684\u661f\u5df4\u514b\u6570\u91cf\u7684\u60c5\u51b5\u662f\u600e\u6837\u7684</li> </ul>"},{"location":"pandas/pandas_group/#solution_1","title":"Solution","text":"<p>Python<pre><code># Step 1: only take out data about China\n\nstar_china = df[df[\"Country\"] == \"CN\"]\n</code></pre> Python<pre><code># Step 2: group the China data by province and count the number of Starbucks (brand) in each province\n\nstar_cn_state = star_china.groupby(by = \"State/Province\").count()[\"Brand\"]\n</code></pre></p>"},{"location":"pandas/pandas_group/#case-three","title":"Case Three","text":""},{"location":"pandas/pandas_group/#background_2","title":"Background:","text":"<ul> <li>\u6cbf\u7528\u5168\u7403\u661f\u5df4\u514b\u7684\u4fe1\u606f</li> </ul>"},{"location":"pandas/pandas_group/#question_2","title":"Question","text":"<ul> <li>\u5bf9\u56fd\u5bb6\u548c\u7701/\u5dde\u540c\u65f6\u8fdb\u884c\u5206\u7ec4</li> </ul>"},{"location":"pandas/pandas_group/#solution_2","title":"Solution","text":"<p>Python<pre><code>grouped = df.groupby(by = [\"Country\", \"State/Province\"])\n</code></pre> Python<pre><code># \u83b7\u53d6\u5206\u7ec4\u540e\u7684\u67d0\u4e00\u90e8\u5206\u6570\u636e\uff08\u5217\uff09\ndf.groupby(by = [\"Country\", \"State/Province\"])[\"Country\"].count()\n</code></pre> Python<pre><code># \u83b7\u53d6\u5206\u7ec4\u540e\u7684\u67d0\u4e00\u90e8\u5206\u6570\u636e (\u884c\uff09\nstar_count = df[\"Brand\"].groupby(by = [df[\"Country\"], df[\"State/Province\"]]).count()\n\n# \u56e0\u4e3adf[\"Brand\"]\u4e2d\u672c\u8eab\u6ca1\u6709\u201dCountry\u201c\u548c\u201dState/Province\u201c\u8fd9\u4e24\u5217\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5148\u89c4\u5b9adf[]\n\nprint(star_count) # output is a series with two indexs (country and province)\n</code></pre> Python<pre><code>#if we want the output is a dataframe instead: \n\ngroup1 = df[[\"Brand\"]].groupby(by = [df[\"Country\"], df[\"State/Province\"]]).count()\ngroup2 = df.groupby(by = [\"Country\", \"State/Province\"])[[\"Brand\"]].count()\ngroup3 = df.groupby(by = [\"Country\", \"State/Province\"]).count()[[\"Brand\"]]\n\n# [\"Brand\"] --&gt; []\u7528\u4e8e\u5f3a\u8c03\u53d6\u67d0\u4e00\u5217\u548c\u591a\u5217\u3002\u8fd9\u91cc\u7279\u522b\u6307\u51fa\u53ea\u53d6\u201cBrand\u201d\u8fd9\u4e00\u5217\uff0c \u6240\u4ee5\u8fd4\u56de\u7684\u662fdataframe\n</code></pre></p>"},{"location":"pandas/pandas_index/","title":"Pandas - Index","text":""},{"location":"pandas/pandas_index/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport string\nimport numpy as np\n</code></pre>"},{"location":"pandas/pandas_index/#functions","title":"Functions","text":""},{"location":"pandas/pandas_index/#1-create-series","title":"1. Create Series","text":"<p>Python<pre><code>s = pd.Series(np.arange(10))\n</code></pre> Python<pre><code>s1 = pd.Series([1, 2, 31, 12, 3, 4])\n\nprint(s1) \n# output: 0     1\n      #   1     2 \n      #   2    31\n      #   3    12\n      #   4     3\n      #   5     4\n      #   dtype: int64\n# first column is the index (\u5065), and the second column is our data \uff08value\uff0c\u503c\uff09\n</code></pre></p>"},{"location":"pandas/pandas_index/#2-create-series-through-dictionary","title":"2. Create Series: through dictionary","text":"Python<pre><code>temp_dict = {\"name\": \"xiaohong\", \"age\": 30, \"tel\": 10086}\ns3 = pd.Series(temp_dict)\n\n# output dtype: object (abbraviation: o)\n</code></pre>"},{"location":"pandas/pandas_index/#3-assign-specific-index","title":"3. Assign specific index","text":"<ul> <li>The size of series and index must be the same </li> </ul> Python<pre><code>s2 = pd.Series([1, 23, 2, 2, 1], index = list(\"abcde\"))\n</code></pre>"},{"location":"pandas/pandas_index/#practice","title":"Practice","text":"<ul> <li>Create a string of numbers (0~9), and use uppercase letter (default: starting from A) as index </li> </ul> Python<pre><code>a = {string.ascii_uppercase[i]: i for i in range(10)} \ns4 = pd.Series(a)\n\nprint(s4) # outpt dtype = int\n</code></pre> <ul> <li>Reassign different index to the series </li> </ul> Python<pre><code>s5 = pd.Series(a, index = list(string.ascii_uppercase[5:15]))\n\nprint(s5)   \n# Output: F    5.0\n        # G    6.0\n        # H    7.0\n        # I    8.0\n        # J    9.0\n        # K    NaN\n        # L    NaN\n        # M    NaN\n        # N    NaN\n        # O    NaN  \n        # outpt dtype = float\n        # since the original series has index from A~J, hence index k~o are not correlated with any number, thus NaN\n        # NaN \u540c\u7406numpy\u4e2d\u7684nan\n</code></pre> <ul> <li>Change data type (same as numpy)</li> </ul> Python<pre><code>s6 = s4.astype(float)\n\nprint(s6) # outpt dtype = int\n</code></pre>"},{"location":"pandas/pandas_index/#4-pandas","title":"4. Pandas\u4e2d\u7684\u5207\u7247&amp;\u7d22\u5f15","text":""},{"location":"pandas/pandas_index/#41-select-a-single-data-point","title":"4.1 Select a single data point","text":"<p>Python<pre><code>s3[\"age\"] \n\n# select the data with \"age\" index\n</code></pre> Python<pre><code>s3[2] \n\n# select data at the second row\n</code></pre></p>"},{"location":"pandas/pandas_index/#42-select-mutiple-rows-or-columns-continuously","title":"4.2 Select mutiple rows or columns (continuously)","text":"Python<pre><code>s3[:2]\n\n# select the first two rows: row 0 and row 1\n</code></pre>"},{"location":"pandas/pandas_index/#43-select-mutiple-rows-or-columns-inconsistantly","title":"4.3 Select mutiple rows or columns (inconsistantly)","text":"Python<pre><code>s3[[0, 2]]\n</code></pre>"},{"location":"pandas/pandas_index/#44-select-the-first-and-third-row","title":"4.4 Select the first and third row","text":"<p>Python<pre><code>s3[[\"age\", \"tel\"]]\n</code></pre> Python<pre><code>s4[2:10:2] \n\n# :2 --&gt; \u8868\u793a\u6b65\u957f = 2 \n# from the third to tenth row, select every two data inclusively (\u5305\u542brow3 \u548c row10\uff0c\u6bcf\u4e24\u4e2a\u6570\u4e00\u9009)\n</code></pre></p>"},{"location":"pandas/pandas_index/#45-select-rows-or-columns-index-outside-the-series-range","title":"4.5 Select rows or columns (index) outside the Series' range","text":"<ul> <li>Will result in NaN </li> <li>For newer python, will result in \"not in index\" error</li> </ul>"},{"location":"pandas/pandas_index/#46","title":"4.6 \u5e03\u5c14\u7d22\u5f15","text":"<p>Python<pre><code>s1[s1 &gt; 10]\n</code></pre> Python<pre><code>s4[s4 &gt; 10]\n\n# Series([], dtype: int64) --&gt; \u8868\u793a\u6240\u9009\u5207\u7247\u4e3a\u7a7a --&gt; series\u4e2d\u6ca1\u6709 &gt; 10 \u7684data\n</code></pre></p>"},{"location":"pandas/pandas_index/#5-extract-series-index","title":"5. Extract Series Index","text":"<p>Python<pre><code>s3.index\n</code></pre> Python<pre><code>for i in s3.index:\n    print(i)\n</code></pre></p>"},{"location":"pandas/pandas_index/#6-check-the-charateristic-of-index","title":"6. Check the charateristic of index","text":"<p>Python<pre><code>type(s3.index)\n\n# check the index type\n</code></pre> Python<pre><code>len(s3.index) \n\n# output: 3 --&gt; there are three index --&gt; counts of index == 3\n</code></pre> Python<pre><code>list(s3.index) \n\n# convert them into a list\n</code></pre> Python<pre><code>list(s3.index)[:2] \n\n# list out the first two index \n</code></pre></p>"},{"location":"pandas/pandas_index/#7-check-values-in-series","title":"7. Check Values in Series","text":"<p>Python<pre><code>type(s3.values)\n\n# type: ndarray\n</code></pre> Python<pre><code>print(s3.values)\n</code></pre></p>"},{"location":"pandas/pandas_index/#8-whereseries","title":"8. Where\u5728series\u7684\u7528\u6cd5","text":"<ul> <li>\u4e0enumpy\u4e0d\u540c</li> </ul> <p>Python<pre><code>s1.where(s1 &gt; 10)   \n\n# output: 0     NaN\n        # 1     NaN\n        # 2    31.0\n        # 3    12.0\n        # 4     NaN\n        # 5     NaN\n# values that are less or equal to 10 will become NaN\n</code></pre> Python<pre><code>s1.where(s1 &gt; 10, 1) \n\n# output: 0     1\n        # 1     1\n        # 2    31\n        # 3    12\n        # 4     1\n        # 5     1\n# whenever the value is less or equal to 10, replace it with 1\n</code></pre></p>"},{"location":"pandas/pandas_index/#footnotes","title":"Footnotes","text":"<ul> <li>ndarry\u4e2d\u7684\u5f88\u591a\u65b9\u6cd5\u4e5f\u53ef\u7528\u4e8eseries \uff08\u5982\uff1aargmax\uff0c clip\uff09</li> </ul>"},{"location":"pandas/pandas_join_merge/","title":"Pandas - Join and Merge","text":""},{"location":"pandas/pandas_join_merge/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport numpy as np\n</code></pre>"},{"location":"pandas/pandas_join_merge/#data-source","title":"Data Source","text":"Python<pre><code>df1 = pd.DataFrame(np.ones((2, 4)), index = [\"A\", \"B\"], columns = list(\"abcd\"))\n# print(df1)\n\ndf2 = pd.DataFrame(np.zeros((3, 3)), index = [\"A\", \"B\", \"C\"], columns = list(\"xyz\")) \n# print(df2)\n\ndf3 = pd.DataFrame(np.zeros((3, 3)), columns = list(\"fax\")) \n# print(df3)\n</code></pre>"},{"location":"pandas/pandas_join_merge/#functions","title":"Functions","text":""},{"location":"pandas/pandas_join_merge/#1-join","title":"1. Join","text":"<ul> <li>Join \u65f6\u4f1a\u51fa\u73b0\u7684\u73b0\u8c61\uff1a</li> <li>Index \u6216\u8005 columns \uff08index\uff09\u76f8\u540c\u4f1a\u51fa\u73b0overlap\u62a5\u9519</li> <li>\u4e24\u7ec4df\u7684index\u683c\u5f0f\u8981\u4e00\u6837\uff1a\u540c\u4e3a\u5b57\u6bcd\uff1b\u540c\u4e3a\u6570\u5b57</li> <li>Join\u7279\u70b9\uff1a\u6309\u7167\u884c\u7d22\u5f15\uff08row index\uff09</li> </ul> <p>Python<pre><code>df1.join(df2)\n\n# output: --&gt;  a    b    c    d    x    y    z\n             # A  1.0  1.0  1.0  1.0  0.0  0.0  0.0\n             # B  1.0  1.0  1.0  1.0  0.0  0.0  0.0\n</code></pre> Python<pre><code>df2.join(df1) \n\n# output: --&gt;  x    y    z    a    b    c    d\n             # A  0.0  0.0  0.0  1.0  1.0  1.0  1.0\n             # B  0.0  0.0  0.0  1.0  1.0  1.0  1.0\n             # C  0.0  0.0  0.0  NaN  NaN  NaN  NaN\n</code></pre></p>"},{"location":"pandas/pandas_join_merge/#2-merge","title":"2. Merge","text":"<ul> <li>Merge\u7279\u70b9\uff1a \u6309\u7167\u5217\u7d22\u5f15 \uff08column index\uff09</li> <li>\u56db\u79cdmerge\uff1a</li> <li>Merge\u9ed8\u8ba4\uff1a\u6c42\u4e24\u4e2adf\u7684\u4ea4\u96c6 \uff08inner\uff09 --&gt; <code>df1.merge(df3, on = \"a\", how = \"inner\")</code></li> <li>Merge outer\uff1a\u6c42\u5e76\u96c6\uff0c NaN\u8865\u5168 --&gt; <code>df1.merge(df3, on = \"a\", how = \"outer\")</code></li> <li>Merge left\uff1a \u5de6\u8fb9df\u4e3a\u51c6\uff0cNaN\u8865\u5168 --&gt; <code>df1.merge(df3, on = \"a\", how = \"left\")</code></li> <li>Merge right\uff1a\u53f3\u8fb9df\u4e3a\u51c6\uff0c NaN\u8865\u5168 --&gt; <code>df1.merge(df3, on = \"a\", how = \"right\")</code></li> </ul> <p>Python<pre><code>df1.merge(df3, on = \"a\") \n\n# on = \"a\"\u8868\u793a\u6309\u7167 column index \u201ca\u201c\u8fdb\u884c\u5408\u5e76 \n# output: empty dataframe \n</code></pre> Python<pre><code># Modify df3\ndf3 = pd.DataFrame(np.arange(9).reshape((3,3)), columns = list(\"fax\")) \n\ndf1.merge(df3, on = \"a\")\n\n# output:      a    b    c    d  f  x\n             # 0  1.0  1.0  1.0  1.0  0  2\n             # 1  1.0  1.0  1.0  1.0  0  2\n# df1\u4e2d\u7684a\u5217\u4e3a1\u65f6\uff0c\u5176\u6240\u5728\u7684row\u53ef\u4ee5\u5339\u914d\u5230df3\u4e2da\u5217\u4e3a1\u65f6\u5bf9\u5e94\u7684row values\u3002\u5176\u4ed6\u4e0d\u5bf9\u5e94\u7684rows\u4e0d\u4f1a\u88ab\u6253\u5370\n</code></pre> Python<pre><code># Modify df1\ndf1.loc[\"A\", \"a\"] = 100\n\ndf1.merge(df3, on = \"a\")\n\ndf1.merge(df3, on = \"a\", how = \"outer\")\n\ndf1.merge(df3, on = \"a\", how = \"left\")\n\ndf1.merge(df3, on = \"a\", how = \"right\")\n\n#\u5f53df\u4e2d\u6ca1\u6709\u4efb\u4f55columns \uff08index\uff09\u76f8\u540c\u65f6\uff0c\u7528left_on \u548c right_on\u6765\u5236\u5b9a\u4ee5\u54ea\u4e24\u4e2acolumn\u4e3amerge\u6807\u51c6:\n\ndf1.merge(df3, left_on = \"b\", right_on = \"a\", how = \"right\")\n</code></pre></p>"},{"location":"pandas/pandas_multiindex/","title":"Pandas - MultiIndex","text":""},{"location":"pandas/pandas_multiindex/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport numpy as np\n</code></pre>"},{"location":"pandas/pandas_multiindex/#data-source","title":"Data Source","text":"Python<pre><code>df = pd.read_csv(\"data/starbucks.csv\")\n\n# \u8bbe\u7f6e pandas \u6253\u5370\u9009\u9879\uff0c\u53d6\u6d88\u622a\u65ad --&gt; \u4ece\u800c\u6253\u5370\u6240\u6709\u7684\u5217\npd.set_option(\"display.max_columns\", None)\n\n# check basic info about this dataset \nprint(df.info())\nprint(df.head(10))\n</code></pre>"},{"location":"pandas/pandas_multiindex/#what-is-multiindex","title":"What is MultiIndex","text":"<ul> <li>Example:</li> </ul> Python<pre><code># Select column \"Country\" and \"State/Province\" from the original data file, and only keep the column \"Brand\"\n\ngroup1 = df[[\"Brand\"]].groupby(by = [df[\"Country\"], df[\"State/Province\"]]).count()\n\nprint(group1.index)\n</code></pre>"},{"location":"pandas/pandas_multiindex/#functions","title":"Functions","text":""},{"location":"pandas/pandas_multiindex/#1-index","title":"1. \u56de\u987eIndex","text":"<p>Python<pre><code># Step 1: create a dataframe\n\ndf1 = pd.DataFrame(np.ones((2, 4)), index = list(\"AB\"), columns = list(\"abcd\"))\n\ndf1.loc[\"A\", \"a\"] = 100\n</code></pre> Python<pre><code># \u83b7\u53d6index\uff1a\n\ndf.index\n</code></pre></p>"},{"location":"pandas/pandas_multiindex/#2-index","title":"2. \u6307\u5b9aIndex","text":"Python<pre><code>df.index = ['x','y']\n</code></pre>"},{"location":"pandas/pandas_multiindex/#3-index","title":"3. \u66ff\u6362\u5df2\u6709\u7684index","text":"Python<pre><code>df1.index = [\"a\", \"b\"]\n\n# \u7528a\uff0cb\u66ff\u6362\u5df2\u6709\u7684index\n</code></pre>"},{"location":"pandas/pandas_multiindex/#4-index","title":"4. \u91cd\u65b0\u8bbe\u7f6eindex","text":"<p>Python<pre><code>df.reindex(list(\"abcedf\"))\n</code></pre> Python<pre><code># \u82e5\u539fdataframe\u4e2d\u6ca1\u6709\u201cf\u201c\uff0c f index\u5bf9\u5e94\u7684row\uff0c\u503c\u90fd\u4e3aNaN\n\ndf2 = df1.reindex([\"a\", \"f\"]) \n</code></pre></p>"},{"location":"pandas/pandas_multiindex/#5-index","title":"5. \u6307\u5b9a\u67d0\u4e00\u5217\u4f5c\u4e3aindex","text":"<p>Python<pre><code># \"Country\"\u5217\uff08\u7684values\uff09\u4f5c\u4e3a\u7d22\u5f15(index)\n\ndf.set_index(\"Country\",drop=False)\n</code></pre> Python<pre><code># \u5c06\u5f53\u524ddataframe\u7684a\u5217\uff08\u7684values\uff09\u4f5c\u4e3a\u7d22\u5f15\uff08index\uff09\n\ndf3 = df1.set_index(\"a\") \n</code></pre> Python<pre><code>df4 = df1.set_index(\"a\", drop = False) \n\n# \u9ed8\u8ba4\uff1adrop = True --&gt; a\u5217\u7684\u503c\u53d8\u6210index\uff0c a\u5217\u4e0d\u89c1\u4e86\n# drop = False --&gt; a\u5217\u7684\u503c\u53d8\u6210index\uff0c \u4e14\u4fdd\u7559a\u5217\n</code></pre></p>"},{"location":"pandas/pandas_multiindex/#6-create-a-dataframe-with-multiindex","title":"6. Create a DataFrame with MultiIndex","text":"Python<pre><code># \u6307\u5b9a\u67d0\u591a\u5217\u4f5c\u4e3aindex --&gt; \u5f97\u5230 mutiIndex\n\ndf5 = df1.set_index([\"a\", \"b\"])\n\ndf6 = df1.set_index([\"a\", \"b\", \"c\"])\n</code></pre>"},{"location":"pandas/pandas_multiindex/#7-index","title":"7. Index \u662f\u53ef\u4ee5\u91cd\u590d\u7684","text":"<p>Python<pre><code># \u8fd4\u56deindex\u7684\u552f\u4e00\u503c\n\ndf.set_index(\"Country\").index.unique()\n</code></pre> Python<pre><code>df1.set_index(\"a\").index.unique() \n\n# Index: [100.0, 1.0]\n</code></pre> Python<pre><code>df1.set_index(\"d\").index.unique()\n\n# Index: [1.0]\n</code></pre></p>"},{"location":"pandas/pandas_multiindex/#8-length-of-index","title":"8. Length of Index","text":"Python<pre><code>len(df1.set_index(\"a\").index)\n\n# \u76f8\u5f53\u4e8ecount the number of index \n</code></pre>"},{"location":"pandas/pandas_multiindex/#9-convert-index-into-a-list","title":"9. Convert Index into a List","text":"Python<pre><code>list(df1.set_index(\"a\").index)\n</code></pre>"},{"location":"pandas/pandas_multiindex/#case-one","title":"Case One","text":"<p>Python<pre><code># create a dataframe \n\na = pd.DataFrame({'a': range(7),'b': range(7, 0, -1),'c': ['one','one','one','two','two','two', 'two'],'d': list(\"hjklmno\")})\n\nb = a.set_index([\"c\", \"d\"])\n</code></pre> Python<pre><code># select \"one\" and \"j\"\n\nb.loc[\"one\"].loc[\"j\"] \n</code></pre> Python<pre><code># dataframe \u4e2d\u5148\u53d6\u91cc\u5c42\u6807\u7b7e\u7684\u505a\u6cd5\n\nb.swaplevel().loc[\"h\"]\n</code></pre></p> <ul> <li>DataFrame\u4e2d\u9700\u8981\u7528loc \u6216\u8005 iloc\u6765\u53d6\u6807\u7b7e\u4ece\u800c\u53d6\u503c</li> <li>Series\u4e2d\u53ef\u76f4\u63a5\u7528\u6807\u7b7e\u540d\u6765\u53d6\u503c \uff08\u4f8b\u5b50\u5982\u4e0b\uff09</li> </ul> <p>Python<pre><code>c = b[\"a\"] \n\n# c is a series \n</code></pre> Python<pre><code>c[\"one\"][\"j\"]\n\n# output: a data point\n</code></pre> Python<pre><code># an alternative way for series \nc[\"one\" , \"j\"]\n</code></pre> Python<pre><code>c[\"one\"]\n\n# output: a series\n</code></pre> Python<pre><code>d = a.set_index([\"d\", \"c\"])[\"a\"]\n\n# if we want to select \"one\"\n\n# print(d.swaplevel())\n\nd.swaplevel()[\"one\"]\n</code></pre></p>"},{"location":"pandas/pandas_nan/","title":"Pandas - Handling NaN","text":""},{"location":"pandas/pandas_nan/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd \n</code></pre>"},{"location":"pandas/pandas_nan/#data-source","title":"Data Source","text":"<p>Python<pre><code>df1 = pd.DataFrame(np.arange(12).reshape(3, 4), index = list(\"abc\"), columns = list(\"wxyz\"))\ndf1[\"w\"][1] = np.nan #[column][row]\n</code></pre> Python<pre><code>df2 = pd.DataFrame(np.arange(12).reshape(3, 4), index = list(\"abc\"), columns = list(\"wxyz\"))\ndf2.iloc[1:, :2] = np.nan\n</code></pre></p>"},{"location":"pandas/pandas_nan/#handeling-missing-data-nan","title":"Handeling missing data (NaN)","text":"<ul> <li>0 \u53ef\u80fd\u662f\u7f3a\u5931\u503c\uff0c\u53ef\u80fd\u662f\u771f\u5b9e\u503c --&gt; \u9700\u6309\u5b9e\u9645\u60c5\u51b5\u5224\u65ad</li> </ul>"},{"location":"pandas/pandas_nan/#1-detect-whether-there-is-nan","title":"1. Detect Whether There is NaN","text":"Python<pre><code>pd.isnull(df1) # \u5224\u65ad\u662fNaN\n\npd.notnull(df1) # \u5224\u65ad\u4e0d\u662fNaN\n</code></pre>"},{"location":"pandas/pandas_nan/#2-manipulate-nan","title":"2. Manipulate NaN","text":""},{"location":"pandas/pandas_nan/#1-delete-nan","title":"\u65b9\u6cd51: Delete NaN","text":"Python<pre><code>df_w = df1[pd.notnull(df1[\"w\"])]  # \u9009\u4e2dcolumn w \u4e2d\u4e0d\u662fNaN\u7684\u90a3\u4e00\u884c\n\nprint(df_w)   # output:      w    x  y  z\n                       # a  0.0  1.0  2  3\n\ndf1.dropna(axis = 0) # delete all rows with nan\n\ndf1.dropna(axis = 0, how = \"any\")   # how = \"any\" --&gt; this is the default setting --&gt; delete all rows with nan\n\ndf1.dropna(axis = 1) # delete all columns with nan\n\ndf1.dropna(axis = 0, how = \"all\") # delete all rows that are all nan\n\ndf1.dropna(axis = 0, inplace = True) # inplace = True --&gt; \u5bf9\u5f53\u524ddataframe\u539f\u5730\u4fee\u6539\uff0c\u4e0d\u7528\u5728\u53e6\u5b58\u4e0e\u4e00\u4e2a\u65b0\u7684dataframe\u4e2d\n</code></pre>"},{"location":"pandas/pandas_nan/#2-refill-data","title":"\u65b9\u6cd52: Refill data","text":"Python<pre><code>df2.fillna(0,inplace = True) # replace NaN with 0 \n\ndf2.fillna(df2.mean(), inplace = True) # replace NaN with mean (column mean)\n\ndf2[\"w\"].fillna(df2[\"w\"].mean(), inplace = True) # operate only on column w and replace its NaN with column mean\n\ndf2[\"w\"] = df2[\"w\"].fillna(df2[\"w\"].mean()) # althernative way to write the above commend\n\n# df2[\"w\"].mean() --&gt; unlike numpy, the mean of a column with NaN is not NaN. \n                  # --&gt; Instead, it is the column mean of the sum of the rest of data point in the column \n</code></pre> <ul> <li>\u6ce8\u91ca\uff1a<code>df2[\"w\"][1] = np.nan</code>\u7684alternative:                  </li> <li><code>df2[\"w\"][\"b\"] = np.nan</code> --&gt; \u901a\u7528\u683c\u5f0f: [column][row]          </li> <li><code>df2.loc[\"b\", \"w\"] = np.nan</code> </li> <li><code>df2.iloc[1, 0] = np.nan</code> </li> </ul>"},{"location":"pandas/pandas_nan/#3-tips","title":"3. \u4e00\u4e9b\u7279\u6b8a\u5904\u7406\u7684Tips","text":"<ul> <li>\u5f53\u4e0d\u5e0c\u671b0\u53c2\u4e0e\u5230\u8fd0\u7b97\u65f6\uff0c\u53ef\u5c060\u53d8\u4e3aNaN\u3002\u4f8b\uff1a<code>df2[df2 == 0] = np.nan</code></li> </ul>"},{"location":"pandas/pandas_practice/","title":"Pandas - Practice One","text":""},{"location":"pandas/pandas_practice/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import font_manager\n</code></pre>"},{"location":"pandas/pandas_practice/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"pandas/pandas_practice/#data-source","title":"Data Source","text":"Python<pre><code>dfm = pd.read_csv(\"data/IMDB-Movie-Data.csv\")\n\nprint(dfm.info())\nprint(dfm.head(10))\n</code></pre>"},{"location":"pandas/pandas_practice/#background","title":"Background","text":"<ul> <li>\u73b0\u67092006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u4fe1\u606f</li> </ul>"},{"location":"pandas/pandas_practice/#case-one","title":"Case One","text":""},{"location":"pandas/pandas_practice/#question","title":"Question","text":"<ul> <li>\u8ba1\u7b97\u4ece2006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u7684\u8bc4\u5206\u7684\u5e73\u5747\u6570</li> </ul>"},{"location":"pandas/pandas_practice/#solution","title":"Solution","text":"Python<pre><code>dfm[\"Rating\"].mean()\n</code></pre>"},{"location":"pandas/pandas_practice/#case-two","title":"Case Two","text":""},{"location":"pandas/pandas_practice/#question_1","title":"Question","text":"<ul> <li>\u8ba1\u7b97\u4ece2006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u7684\u5bfc\u6f14\u4eba\u6570 (\u5e76\u672a\u67e5\u91cd)</li> </ul>"},{"location":"pandas/pandas_practice/#solution_1","title":"Solution","text":"<p>Python<pre><code># Take out director name --&gt; array with all the names \n\ndfm[\"Director\"].tolist() \n</code></pre> Python<pre><code># Turning array to dictionary \n\nset(dfm[\"Director\"].tolist())\n</code></pre> Python<pre><code># Count numbers of director in the dictionary \n\nlen(set(dfm[\"Director\"].tolist()))\n\n# An alternative way to count: \n\ndfm[\"Director\"].unique() # automatically return a list \n\nlen(dfm[\"Director\"].unique())\n</code></pre></p>"},{"location":"pandas/pandas_practice/#case-three","title":"Case Three","text":""},{"location":"pandas/pandas_practice/#question_2","title":"Question","text":"<ul> <li>\u8ba1\u7b97\u4ece2006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u7684\u6f14\u5458\u4eba\u6570 (\u5e76\u672a\u67e5\u91cd)</li> </ul>"},{"location":"pandas/pandas_practice/#solution_2","title":"Solution","text":"<p>Python<pre><code># a list of all actor names for each movie \uff08\u5927\u5217\u8868\u5d4c\u5957\u5c0f\u5217\u8868\uff09\n\ntemp_actor = dfm[\"Actors\"].str.split(\",\").tolist()\n</code></pre> Python<pre><code># \u5c55\u5f00\u5927\u5217\u8868&amp;\u5c0f\u5217\u8868\u5230\u540c\u4e00\u4e2a\u5217\u8868\u4e2d\nactor_list = [i for j in temp_actor for i in j] \n</code></pre> Python<pre><code>actor_num = len(set(actor_list))\n\nprint(actor_num)\n</code></pre></p>"},{"location":"pandas/pandas_practice/#case-four","title":"Case Four","text":""},{"location":"pandas/pandas_practice/#question_3","title":"Question","text":"<ul> <li>\u5c55\u793arating\u548cruntime\u7684\u5206\u5e03\u60c5\u51b5 --&gt; using histogram</li> </ul>"},{"location":"pandas/pandas_practice/#solution_3","title":"Solution","text":"<p>Python<pre><code># Step 1: prepare data\n\nruntime = dfm[\"Runtime (Minutes)\"].values # --&gt; output is ndarray. Without .values, output is a series\n</code></pre> Python<pre><code># Step 2: determine bin width\n\nmax_runtime = runtime.max()\nmin_runtime = runtime.min()\nbin_width = 5 #\u901a\u8fc7\u591a\u6b21\u8ddfgrid\u6bd4\u8f83\u8c03\u8bd5\u5f97\u51fa\n</code></pre> Python<pre><code># Step 3: determine number of bins\n\nnum_bin = (max_runtime - min_runtime)//bin_width\n</code></pre> Python<pre><code># Step 4: plot data \n\n# set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# plot graph \nplt.hist(runtime, num_bin, density = True, color = \"#DB7093\")\n\n# modify x-ticks \nplt.xticks(range(min_runtime, max_runtime + bin_width, bin_width))\n\n# add descriptions \nplt.xlabel(\"Runtime (minutes)\")\nplt.ylabel(\"Frequency\")\nplt.title(\"2006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u7684Runtime\u5206\u5e03\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# save and display figure\nplt.savefig(\"./pandas/runtime.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_practice/#case-five","title":"Case Five","text":""},{"location":"pandas/pandas_practice/#question_4","title":"Question","text":"<ul> <li>\u5c55\u793arating\u7684\u5206\u5e03\u60c5\u51b5 --&gt; using histogram</li> </ul>"},{"location":"pandas/pandas_practice/#solution_4","title":"Solution","text":"<p>Python<pre><code># Step 1: prepare data\n\nrating = dfm[\"Rating\"].values # --&gt; output is ndarray. Without .values, output is a series\n</code></pre> Python<pre><code># Step 2: determine bin width\n\nmax_rating = rating.max()\nmin_rating = rating.min()\nprint(max_rating, min_rating)\nbin_width = 0.1 #\u901a\u8fc7\u591a\u6b21\u8ddfgrid\u6bd4\u8f83\u8c03\u8bd5\u5f97\u51fa\n</code></pre> Python<pre><code># Step 3: determine number of bins\n\nnum_bin = (max_rating - min_rating)//bin_width\n</code></pre> Python<pre><code># Step 4: plot data\n\n# set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# plot graph \nplt.hist(rating, int(num_bin), density = True, color = \"#DAA520\", align = \"left\")\n\n# modify x-ticks \nplt.xticks(np.arange(0, 10 + bin_width, bin_width)[::5]) \n\n# Since is rating (data is between 1 and 10), so using number 0 and 10 instead of min_rating and max_rating for simplicity\n# \u4e0d\u80fd\u4f7f\u7528range()\u56e0\u4e3arange\u51fd\u6570\u53ea\u63a5\u53d7\u6574\u6570\u53c2\u6570\n\n# add descriptions \nplt.xlabel(\"Rating\")\nplt.ylabel(\"Frequency\")\nplt.title(\"2006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u7684Rating\u5206\u5e03\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# save figure and display\nplt.savefig(\"./pandas/rating.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_practice/#case-six","title":"Case Six","text":""},{"location":"pandas/pandas_practice/#question_5","title":"Question","text":"<ul> <li>\u5c55\u793arating\u7684\u5206\u5e03\u60c5\u51b5 </li> </ul>"},{"location":"pandas/pandas_practice/#solution_5","title":"Solution","text":"<ul> <li>A better way to display the histogram: aligning each bar with each x-tick</li> </ul> <p>Python<pre><code># Step 1: prepare data\n\nrating = dfm[\"Rating\"].values # --&gt; output is ndarray. Without .values, output is a series\n</code></pre> Python<pre><code># Step 2: determine bin width\n\nmax_rating = rating.max()\nmin_rating = rating.min()\n</code></pre> Python<pre><code># Step 3: determine number of bins\n\nnum_bin_list = [1.6]\ni = 1.6\nwhile i &lt;= max_rating:\n    i+= 0.5\n    num_bin_list.append(i)\n</code></pre> Python<pre><code># Step 4: plot data\n\nplt.figure(figsize = (20, 8), dpi = 80)\n\n# plot graph \nplt.hist(rating, num_bin_list, density = True, color = \"#3CB371\")\n\n# modify x-ticks \nplt.xticks(num_bin_list) \n\n# add descriptions \nplt.xlabel(\"Rating\")\nplt.ylabel(\"Frequency\")\nplt.title(\"2006\u5e74\u52302016\u5e741000\u90e8\u6700\u6d41\u884c\u7684\u7535\u5f71\u7684Rating\u5206\u5e03\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# save figure and display\nplt.savefig(\"./pandas/better_rating.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_practice2/","title":"Pandas - Practice Two","text":""},{"location":"pandas/pandas_practice2/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import font_manager\n</code></pre>"},{"location":"pandas/pandas_practice2/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"pandas/pandas_practice2/#data-source","title":"Data Source","text":"Python<pre><code>df = pd.read_csv(\"data/starbucks.csv\")\n\n# \u8bbe\u7f6e pandas \u6253\u5370\u9009\u9879\uff0c\u53d6\u6d88\u622a\u65ad --&gt; \u4ece\u800c\u6253\u5370\u6240\u6709\u7684\u5217\npd.set_option(\"display.max_columns\", None)\n\nprint(df.info)\nprint(df)\n</code></pre>"},{"location":"pandas/pandas_practice2/#background","title":"Background","text":"<ul> <li>\u73b0\u6709\u5173\u4e8e\u5168\u7403\u661f\u5df4\u514b\u7684\u4fe1\u606f</li> </ul>"},{"location":"pandas/pandas_practice2/#case-one","title":"Case One","text":""},{"location":"pandas/pandas_practice2/#question","title":"Question","text":"<ul> <li>\u4f7f\u7528matplotlib\u5448\u73b0\u5e97\u94fa\u603b\u6570\u6392\u540d\u524d10\u7684\u56fd\u5bb6</li> </ul>"},{"location":"pandas/pandas_practice2/#solution","title":"Solution","text":"<ul> <li>Categorial data, so using bar chat </li> </ul> <p>Python<pre><code># Step 1: prepare data\ngroup_country = df.groupby(by = \"Country\").count()[\"Store Number\"].sort_values(ascending = False)[:10]\n</code></pre> Python<pre><code># Step 2: plot data \n\n# 1. set figure size\nplt.figure(figsize = (20, 8), dpi = 80)\n\n# 2. plot graph\nx = group_country.index\ny = group_country.values\nplt.bar(range(len(x)), y, color = \"#DEB887\")\n\n# 3. set the xticks \nplt.xticks(range(len(x)), x)\n\n# 4. add descriptions \nplt.xlabel(\"Country\")\nplt.ylabel(\"Number of Stores\")\nplt.title(\"\u5e97\u94fa\u603b\u6570\u6392\u540d\u524d10\u7684\u56fd\u5bb6\", fontproperties = my_font)\n\n# 5. save and display the figure\nplt.savefig(\"./pandas/stores.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_practice2/#case-two","title":"Case Two","text":""},{"location":"pandas/pandas_practice2/#question_1","title":"Question","text":"<ul> <li>\u4f7f\u7528matplotlib\u5448\u73b0\u51fa\u5728\u4e2d\u56fd\u5e97\u94fa\u6570\u91cf\u6392\u540d\u524d\u5341\u7684\u57ce\u5e02</li> </ul>"},{"location":"pandas/pandas_practice2/#solution_1","title":"Solution","text":"<ul> <li>Categorial data, so using bar chat </li> </ul> <p>Python<pre><code># Step 1: perpare data\nchina_store = df.groupby(by = [\"Country\" , \"City\"]).count()[\"Store Number\"].sort_values(ascending = False)[\"CN\"][:10]\n</code></pre> Python<pre><code># Step 2: plot data\n\n# set figure size\nplt.figure(figsize = (20, 8), dpi = 80)\n\n# plot bar chat\nx = china_store.index\ny = china_store.values\nplt.bar(range(len(x)), y, color = \"#87CEEB\")\n\n# modify xticks\nplt.xticks(range(len(x)), x, fontproperties = my_font)\n\n# add description \nplt.xlabel(\"City\")\nplt.ylabel(\"Number of Stores\")\nplt.title(\"\u4e2d\u56fd\u6bcf\u4e2a\u57ce\u5e02\u7684\u5e97\u94fa\u6570\u91cf\", fontproperties = my_font)    \n\n# save and display the figure\nplt.savefig(\"./pandas/stores_china.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_practice3/","title":"Pandas - Practice Three","text":""},{"location":"pandas/pandas_practice3/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import font_manager\n</code></pre>"},{"location":"pandas/pandas_practice3/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"pandas/pandas_practice3/#data-source","title":"Data Source","text":"Python<pre><code>df = pd.read_csv(\"data/books.csv\")\n\n# \u8bbe\u7f6e pandas \u6253\u5370\u9009\u9879\uff0c\u53d6\u6d88\u622a\u65ad --&gt; \u4ece\u800c\u6253\u5370\u6240\u6709\u7684\u5217\npd.set_option(\"display.max_columns\", None)\n\nprint(df.info)\nprint(df)\n</code></pre>"},{"location":"pandas/pandas_practice3/#background","title":"Background","text":"<ul> <li>\u73b0\u6709\u5168\u7403\u6392\u540d\u9760\u524d\u768410000\u672c\u4e66\u7684\u6570\u636e</li> </ul>"},{"location":"pandas/pandas_practice3/#case-one","title":"Case One","text":""},{"location":"pandas/pandas_practice3/#question","title":"Question","text":"<ul> <li>\u8bf7\u7edf\u8ba1\u4e0d\u540c\u5e74\u4efd\u4e66\u7684\u6570\u91cf\uff0c\u5e76\u53d6\u524d20\u4e2a</li> </ul>"},{"location":"pandas/pandas_practice3/#solution","title":"Solution","text":"<ul> <li>Categorial data, so using bar chat </li> </ul> <p>Python<pre><code># Step 1: prepare data\n\n# there are NaN in \"original_publication_year\" --&gt; drop them\n\ndf1 = df[pd.notnull(df[\"original_publication_year\"])]\n\ncount_year = df1.groupby(by = \"original_publication_year\").count()[\"title\"].sort_values(ascending = False).head(20)\n</code></pre> Python<pre><code># Step 2: plot the data \n\n# 1. set figure size\nplt.figure(figsize = (20, 8), dpi = 80)\n\n# 2. plot graph\nx = count_year.index\ny = count_year.values\nplt.bar(range(len(x)), y, color = \"#FFDAB9\")\n\n# 3. set the xticks \nplt.xticks(range(len(x)), x.astype(int))\n\n# 4. add descriptions \nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of Books\")\nplt.title(\"\u5168\u7403\u6392\u540d\u9760\u524d\u768410000\u4e66\u4e2d\u53d1\u8868\u4e8e\u4e0d\u540c\u5e74\u4efd\u7684\u6570\u91cf(\u524d20) \", fontproperties = my_font)\n\n# 5. save and display the figure\nplt.savefig(\"./pandas/books_year.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_practice3/#case-two","title":"Case Two","text":""},{"location":"pandas/pandas_practice3/#question_1","title":"Question","text":"<ul> <li>\u8bf7\u7edf\u8ba1\u4e0d\u540c\u5e74\u4efd\u4e66\u7684\u5e73\u5747\u8bc4\u5206\u60c5\u51b5</li> </ul>"},{"location":"pandas/pandas_practice3/#solution_1","title":"Solution","text":"<ul> <li>Curious about how rating change over the year --&gt; use line chat</li> </ul> <p>Python<pre><code># Step 1: prepare data\n\n# there are NaN in \"original_publication_year\" --&gt; drop them\n\ndf1 = df[pd.notnull(df[\"original_publication_year\"])]\n\nmean_rating = df1[\"average_rating\"].groupby(by = df[\"original_publication_year\"]).mean()\n\n# there are negative publication year --&gt; \u8d1f\u6570\u8868\u793a\u516c\u5143\u524d\n</code></pre> Python<pre><code># Step 2: plot the data \n\n# set figure size\nplt.figure(figsize = (20, 8), dpi = 80)\n\n# plot bar chat \nx = mean_rating.index\ny = mean_rating.values\nplt.plot(range(len(x)), y, color = \"#A0522D\")\n\n# set the xticks \nplt.xticks(range(len(x))[::10], np.round(x[::10]).astype(int), rotation = 45)\n\n# add descriptions \nplt.xlabel(\"\u5e74\u4efd (\u8d1f\u6570\u4e3a\u516c\u5143\u524d)\", fontproperties = my_font)\nplt.ylabel(\"\u4e0d\u540c\u5e74\u4efd\u4e66\u7684\u5e73\u5747\u8bc4\u5206\", fontproperties = my_font)\nplt.title(\"\u53d1\u8868\u4e8e\u4e0d\u540c\u5e74\u4efd\u7684\u5168\u7403\u6392\u540d\u9760\u524d\u768410000\u672c\u4e66\u7684\u5e73\u5747\u8bc4\u5206\u60c5\u51b5\", fontproperties = my_font)\n\n# save and display the figure\nplt.savefig(\"./pandas/mean_rating.png\")\nplt.show()\n</code></pre> </p>"},{"location":"pandas/pandas_readdata/","title":"Pandas - Read Data","text":""},{"location":"pandas/pandas_readdata/#_1","title":"\u524d\u8a00","text":"<ul> <li>Pandas\u4e2d\u5927\u5c0f\u5199matters</li> </ul>"},{"location":"pandas/pandas_readdata/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd \nimport numpy as np\nimport string\n</code></pre>"},{"location":"pandas/pandas_readdata/#data-source","title":"Data Source","text":"<ul> <li>Read CSV file</li> </ul> Python<pre><code>df = pd.read_csv(\"/Users/jrq/Desktop/learnpy/data/dognames.csv\")\n\n# check data \nprint(df.head(), df.info())\n</code></pre>"},{"location":"pandas/pandas_readdata/#functions","title":"Functions","text":""},{"location":"pandas/pandas_readdata/#1-sortrank","title":"1. Sort/Rank","text":"<ul> <li>Practice question: which dog name is the most frequently used?</li> </ul> Python<pre><code># rank the names based of the name counts \ndf_sort = df.sort_values(by = \"Count_AnimalName\", ascending = False) # ascending: default is True\n</code></pre>"},{"location":"pandas/pandas_readdata/#2-select-rows-andor-columns","title":"2 Select Rows and/or Columns","text":""},{"location":"pandas/pandas_readdata/#21-select-top-rows","title":"2.1 Select Top Rows","text":"Python<pre><code># select the top 5\n\nprint(df_sort.head(5))\n</code></pre>"},{"location":"pandas/pandas_readdata/#22-select-rowscolumns-using-slice","title":"2.2 Select Rows/Columns Using Slice","text":"<p>Python<pre><code># 1. select the first 100 rows\uff1a\n\ndf_sort[:100]\n\n# []\u4e2d\u76f4\u63a5\u5199\u6570\u5b57\u8868\u793a\u6309row\u64cd\u4f5c\n</code></pre> Python<pre><code># 2. select by columns \n\ndf_sort[\"Row_Labels\"]\n\n# []\u4e2d\u5199\u201c\u5b57\u7b26\u4e32\u201c\u8868\u793a\u6309column\u64cd\u4f5c -- output is a series\n</code></pre> Python<pre><code># 3. select by columns and rows \n\ndf_sort[:20][\"Row_Labels\"]\n\n# [row][column] --&gt; \u5148\u53d6\u524d20\u884c\uff0c\u518d\u53d6row_labels\u8fd9\u4e00\u5217\n</code></pre> Python<pre><code># 4. select certain rows and columns \n\ndf1 = pd.DataFrame(np.arange(12).reshape(3, 4), index = list(\"abc\"), columns = list(\"wxyz\"))\ndf1[\"w\"][1] = np.nan #[column][row]\ndf1[\"w\"][\"b\"] = np.nan # alternative way\n</code></pre></p> <ul> <li>\u4e3a\u4ec0\u4e48 #4 \u5207\u7247\u662f\u5148\u5217\u540e\u884c\uff0c\u800c #3 \u662f\u5148\u884c\u540e\u5217\uff1a</li> <li>DataFrame \u7684\u9ed8\u8ba4\u7d22\u5f15\u65b9\u5f0f\u662f\u5217\u4f18\u5148\uff08<code>df[column]</code>\uff09\uff0c\u800c\u4e0d\u662f\u884c\u4f18\u5148\u3002\u56e0\u4e3a\u5217\u64cd\u4f5c\uff08\u5982\u9009\u62e9\u3001\u8ba1\u7b97\uff09\u66f4\u5e38\u89c1\u3002</li> <li><code>df2[\"w\"][1]</code> \u53ea\u80fd\u5148\u5217\u540e\u884c\uff0c\u56e0\u4e3a <code>df2[\"w\"]</code> \u8fd4\u56de\u7684\u662f Series\uff0c\u800c Series \u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u636e\u7ed3\u6784\uff0c\u53ea\u6709\u7d22\u5f15\uff08\u884c\uff09\u6ca1\u6709\u5217</li> <li><code>df_sort[:20][\"Row_Labels\"]</code> \u53ef\u4ee5\u5148\u884c\u540e\u5217\uff0c\u56e0\u4e3a <code>df_sort[:20]</code> \u8fd4\u56de\u7684\u662f DataFrame\uff0c\u65e2\u6709\u884c\u7d22\u5f15\u4e5f\u6709\u5217\u7d22\u5f15\u3002<ul> <li><code>[\"Row_Labels\"]</code> \u4ece\u8fd9\u4e2a\u65b0\u7684 DataFrame \u4e2d\u9009\u62e9\u5217 \"Row_Labels\"\uff0c\u8fd4\u56de\u4e00\u4e2a Series\u3002</li> </ul> </li> </ul>"},{"location":"pandas/pandas_readdata/#23-best-practice-select-rowscolumns-based-on-index","title":"2.3 Best Practice: Select Rows/Columns Based on Index","text":"<p>Python<pre><code>df1.loc[\"a\",\"z\"]\n\n# [\"row index\",\"column index\"] --&gt; \u8868\u793aa\u884c\uff0cz\u5217\n</code></pre> Python<pre><code>df1.loc[\"a\"]\n\n# select only row a and all columns\n</code></pre> Python<pre><code>df1.loc[\"a\",:]\n# select only row a and all columns\n</code></pre> Python<pre><code>df1.loc[:,\"z\"]\n\n# select only column z\n</code></pre> Python<pre><code>df1.loc[[\"a\",\"c\"],\"z\"]\n\n# select only row a and c, and column z\n</code></pre> Python<pre><code>df1.loc[[\"a\",\"c\"], [\"z\", \"w\"]]\n\n# select only row a and c, and column z and w\n</code></pre> Python<pre><code>df1.loc[\"a\":\"c\", [\"z\", \"w\"]]\n\n# select only row a to c (inclusively), and column z and w only\n# \u4e0e\u666e\u901a\u5207\u7247\u4e0d\u540c\uff0c\u8fd9\u91cc\u7684row c\u662f\u88ab\u5305\u542b\u9009\u4e2d\u7684\n</code></pre></p>"},{"location":"pandas/pandas_readdata/#24-best-practice-select-rowscolumns-based-on-location","title":"2.4 Best Practice: Select Rows/Columns Based on location","text":"<p>Python<pre><code>df1.iloc[1]\n\n# select the second row \n</code></pre> Python<pre><code>df1.iloc[:, 2]\n\n# select all rows but only the third column\n</code></pre> Python<pre><code>df1.iloc[:, [2, 1]]\n\n# select all rows but only the second and third column \n</code></pre> Python<pre><code>df1.iloc[[0,2], [2, 1]]\n\n# select the first and third row and the second and third column \n</code></pre> Python<pre><code>df1.iloc[1:, :2]\n\n# select all rows since the second row, and select all columns before the third column\n</code></pre></p>"},{"location":"pandas/pandas_readdata/#3-assign-values-to-rowcolumna-data-point","title":"3 Assign values to row/column/a data point","text":"Python<pre><code>df1.iloc[1:, :2] = 30\n</code></pre>"},{"location":"pandas/pandas_readdata/#4-assign-nan-to-rowcolumna-data-point","title":"4. Assign NaN to row/column/a data point","text":"Python<pre><code>df1.iloc[1:, :2] = np.nan \n\n# \u4e0d\u540c\u4e8enumpy\uff0cpandas\u4f1a\u5c06\u6570\u636e\u81ea\u52a8\u8f6c\u6362\u6210float type\uff0c\u7136\u540e\u518dassign NaN\n\n# alternatives: \n\ndf1.loc[\"b\", \"w\"] = np.nan  \n</code></pre>"},{"location":"pandas/pandas_readdata/#5","title":"5. \u5e03\u5c14\u7d22\u5f15","text":"Python<pre><code>df_sort[df_sort[\"Count_AnimalName\"] &gt; 800]\n</code></pre> <ul> <li>When having multiple conditions:                              <ol> <li><code>&amp;</code> --&gt; \u8868\u793a\u201c\u4e14\u201d\uff0cfor having more than one condition concurrently              </li> <li><code>|</code> --&gt; \u8868\u793a\u201c\u6216\u201d\uff0cmeeting one condition or the other               </li> </ol> </li> </ul> <p>Python<pre><code># Have more than one condition concurrently:\n\ndf_sort[(800 &lt; df_sort[\"Count_AnimalName\"]) &amp; (df_sort[\"Count_AnimalName\"] &lt; 1000)]\n</code></pre> Python<pre><code>df_sort[(df_sort[\"Row_Labels\"].str.len() &gt; 4) &amp; (df_sort[\"Count_AnimalName\"] &gt; 700)]\n</code></pre> Python<pre><code># Meet one condition or the other \n\ndf_sort[(800 &lt; df_sort[\"Count_AnimalName\"]) | (df_sort[\"Count_AnimalName\"] &lt; 1000)]\n</code></pre></p>"},{"location":"pandas/pandas_readdata/#6-str","title":"6. str\u7684\u591a\u79cd\u65b9\u6cd5","text":"<p><code>str.cat()</code> --&gt; \u7528\u4e8e\u5b57\u7b26\u4e32\u94fe\u63a5\uff0c\u53ef\u6307\u5b9a\u5206\u9694\u7b26       <code>str.contains()</code>--&gt; \u5b57\u7b26\u4e32\u5305\u542b\u6307\u5b9a\u6a21\u5f0f\u7684\u5e03\u5c14\u6570\u7ec4       <code>str.count()</code> <code>str.endswith()</code> <code>str.startswith()</code> <code>str.findall()</code> <code>str.get()</code> <code>str.join()</code> <code>str.len()</code> --&gt; \u7528\u4e8e\u533a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6     <code>str.lower()</code> \u5c0f\u5199     <code>str.upper()</code> \u5927\u5199     <code>str.match()</code> <code>str.pad()</code> <code>str.center()</code> <code>str.repeat()</code> --&gt; \u5bf9\u5404\u4e2a\u5b57\u7b26\u4e32\u6267\u884c\u4e09\u6b21    <code>str.replace()</code> <code>str.slice()</code> <code>str.split()</code> <code>str.strip().tolist()</code> --&gt; \u5b57\u7b26\u4e32\u9664\u53bb\u7a7a\u767d\u3001\u6362\u884c --&gt; \u5f97\u5217\u8868     <code>str.rstrip()</code> <code>str.lstrip()</code> </p>"},{"location":"pandas/pandas_timeseries/","title":"Pandas - Time Series","text":""},{"location":"pandas/pandas_timeseries/#import-modules","title":"Import Modules","text":"Python<pre><code>import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import font_manager\n</code></pre>"},{"location":"pandas/pandas_timeseries/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":"<ul> <li>For macOS</li> </ul> Python<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"pandas/pandas_timeseries/#data-source","title":"Data Source","text":"Python<pre><code># read CSV data file \ndf = pd.read_csv(\"/Users/jrq/Desktop/learnpy/data/911.csv\")\n# \u8bbe\u7f6e pandas \u6253\u5370\u9009\u9879\uff0c\u53d6\u6d88\u622a\u65ad --&gt; \u4ece\u800c\u6253\u5370\u6240\u6709\u7684\u5217\npd.set_option(\"display.max_columns\", None)\nprint(df.head(), df.info())\n</code></pre>"},{"location":"pandas/pandas_timeseries/#time-series","title":"Time Series \u77e5\u8bc6\u70b9\uff1a","text":""},{"location":"pandas/pandas_timeseries/#_1","title":"\u901a\u5f0f:","text":"Python<pre><code>pd.data_range(start = None, end = None, periods = None, freq = \"D\")\n</code></pre>"},{"location":"pandas/pandas_timeseries/#_2","title":"\u53c2\u6570\uff1a","text":"<p><code>freq = \"D\"</code> --&gt; \u4ee5\u5929\u4e3a\u5355\u4f4d                    <code>freq = \"20D\"</code> --&gt; \u4e5f\u4ee520\u5929\u4e3a\u5355\u4f4d                      <code>freq = \"M\"</code> --&gt; \u4ee5\u6708\u4e3a\u5355\u4f4d                    <code>periods = 10</code> --&gt; \u751f\u621010\u4e2a                    <code>\"B\"</code> --&gt; business day                 <code>\"H\"</code> --&gt; hour                 <code>\"T\"</code> or <code>\"min\"</code> --&gt; minute                   <code>\"S\"</code> --&gt; second                   <code>\"L\"</code> or <code>\"ms\"</code>--&gt; milli \u6beb\u79d2              <code>\"U\"</code> --&gt; micro \u5fae\u79d2                       <code>\"M\"</code> --&gt; MonthEnd \u6bcf\u6708\u6700\u540e\u4e00\u4e2a\u65e5\u5386\u65e5                      <code>\"BM\"</code> --&gt; BusinessMonthEnd \u6bcf\u6708\u6700\u540e\u4e00\u4e2a\u5de5\u4f5c\u65e5                         <code>\"MS\"</code>--&gt; MonthBegin \u6bcf\u6708\u7b2c\u4e00\u4e2a\u65e5\u5386\u65e5                      <code>\"BMS\"</code> --&gt; BusinessMonthBegin \u6bcf\u6708\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u65e5                         </p>"},{"location":"pandas/pandas_timeseries/#examples","title":"Examples\uff1a","text":"<p><code>pd.date_range(start = \"20171230\", end = \"20180131\", freq = \"D\")</code> <code>pd.date_range(start = \"2017/12/30\", end = \"20180131\", freq = \"D\")</code> <code>pd.date_range(start = \"2017-12-30\", end = \"20180131\", freq = \"D\")</code> <code>pd.date_range(start = \"2017-12-30 10:10:30\", end = \"20180131\", freq = \"D\")</code> <code>pd.date_range(start = \"20171230\", end = \"20180131\", freq = \"M\")</code> <code>pd.date_range(start = \"20171230\", end = \"20180131\", freq = \"3M\")</code> <code>pd.date_range(start = \"20171230\", end = \"20180131\", freq = \"H\")</code> <code>pd.date_range(start = \"20171230\", end = \"20180131\", freq = \"10D\")</code> <code>pd.date_range(start = \"20171230\", end = \"20180131\", periods = 10, freq = \"10D\")</code> </p> <p>\u5f53\u6570\u636e\u4e2d\u6ca1\u6709\u5b8c\u6574\u7684\u65f6\u95f4\u5e8f\u5217\uff08\u4f8b\u5982\uff1a\u539f\u59cb\u6570\u636e\u91cc\u7684\u4e8b\u65f6\u95f4\u5b57\u7b26\u4e32\uff09--&gt; \u7528<code>pd.to_datetime()</code>\u6765\u8f6c\u6362            </p> Python<pre><code>df[\"timeStamp\"] = pd.to_datetime(df[\"timeStamp\"], format = \"\")\n</code></pre> <ul> <li><code>format = \"\"</code>\u901a\u5e38\u53ef\u4ee5\u4e0d\u7528\u5199\uff0c\u4f46\u5f53<code>pd.to_datetime</code>\u65e0\u6cd5\u8bc6\u522b\u683c\u5f0f\u65f6\uff08\u4f8b\u5982\u65f6\u95f4\u5b57\u7b26\u4e32\u4e0d\u5b8c\u6574\uff0c\u6216\u5305\u542b\u4e2d\u6587\uff09\uff0c\u518d\u7528<code>format = \"\"</code>\u53c2\u6570\u6765\u5f3a\u8c03\u5e94\u8be5\u600e\u4e48\u683c\u5f0f\u5316<ul> <li>\u4f8b\u5982\uff1a<code>format = \"%Y-%m-%d %H:%M:%S %f\"</code></li> </ul> </li> </ul>"},{"location":"pandas/pandas_timeseries/#_3","title":"\u91cd\u91c7\u6837","text":"<ul> <li>\u5c06\u65f6\u95f4\u5e8f\u5217\u4ece\u4e00\u4e2a\u9891\u7387\u8f6c\u5316\u4e3a\u53e6\u4e00\u4e2a\u9891\u7387\u8fdb\u884c\u5904\u7406\u7684\u8fc7\u7a0b</li> <li>\u4f8b\u5982\uff1a<code>df.resample(\"M\")</code></li> <li>\u4f8b\u5982\uff1a<code>df.resample(\"M\").mean()</code> --&gt; \u6309\u6708\u6765\u7edf\u8ba1\u5e73\u5747\u503c</li> <li>\u4f8b\u5982\uff1a<code>df.resample(\"10D\").count()</code> --&gt; \u6309\u6bcf\u5341\u5929\u7684\u9891\u7387\u6c42\u4e2a\u6570</li> </ul>"},{"location":"pandas/pandas_timeseries/#_4","title":"\u964d\u91c7\u6837","text":"<ul> <li>\u5c06\u9ad8\u9891\u7387\u6570\u636e\u8f6c\u5316\u6210\u4f4e\u9891\u7387\u6570\u636e \uff08\u4f8b\u5982\uff1a\u4ece\u79d2\u5230\u5929\uff09</li> </ul>"},{"location":"pandas/pandas_timeseries/#_5","title":"\u5347\u91c7\u6837","text":"<ul> <li>\u5c06\u4f4e\u9891\u7387\u6570\u636e\u8f6c\u5316\u6210\u9ad8\u9891\u7387\u6570\u636e</li> </ul>"},{"location":"pandas/pandas_timeseries/#case-one","title":"Case One","text":""},{"location":"pandas/pandas_timeseries/#background","title":"Background","text":"<ul> <li>\u73b0\u5728\u6211\u4eec\u67092015\u52302020\u5e7425\u4e07\u6761911\u7684\u7d27\u6025\u7535\u8bdd\u7684\u6570\u636e</li> </ul>"},{"location":"pandas/pandas_timeseries/#question-one","title":"Question One","text":"<ul> <li>\u8bf7\u7edf\u8ba1\u51fa\u8fd9\u4e9b\u6570\u636e\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u7d27\u6025\u60c5\u51b5\u7684\u6b21\u6570</li> </ul>"},{"location":"pandas/pandas_timeseries/#solution","title":"Solution","text":"<p>Python<pre><code># print(df[\"title\"].str.split(\": \"))\n\n# Step 1: \u904d\u5386\u5217\u8868 - \u63d0\u53d6category\n    # if dataframe\uff1ause to_list\uff08\uff09\uff0cif series: use tolist()\ntemp_list = df[\"title\"].str.split(\": \").tolist()\ncategory_list = list(set(i[0] for i in temp_list))\n\nprint(category_list) # there are only three categories \n</code></pre> Python<pre><code># Step 2: \u6784\u9020\u5168\u4e3a0\u7684\u6570\u7ec4\nzeros_df = pd.DataFrame(np.zeros((df.shape[0], len(category_list))), columns = category_list)\n</code></pre> Python<pre><code># Step 3: \u8d4b\u503c\nfor cat in category_list:\n    zeros_df[cat][df[\"title\"].str.contains(cat)] = 1 \nprint(zeros_df)\n# df[\"title\"].str.contains(cat) --&gt; change the title conlumn to bool (true or false)\n# if ture, change 0 to 1 i zeros_df\n</code></pre> Python<pre><code># Step 4: \u7edf\u8ba1\u51fa\u8fd9\u4e9b\u6570\u636e\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u7d27\u6025\u60c5\u51b5\u7684\u6b21\u6570\nsum_cat = zeros_df.sum(axis = 0)\nprint(sum_cat)\n</code></pre></p>"},{"location":"pandas/pandas_timeseries/#alternative-way","title":"Alternative Way: \u7edf\u8ba1\u51fa\u8fd9\u4e9b\u6570\u636e\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u7d27\u6025\u60c5\u51b5\u7684\u6b21\u6570","text":"Python<pre><code>category_list = [i[0] for i in temp_list]\n\n# add a \"cate\" column to the original dataframe\ndf[\"cate\"] = pd.DataFrame(np.array(category_list).reshape((df.shape[0], 1)))\n\nprint(df.head(5))\n\n# \u7edf\u8ba1\u51fa\u8fd9\u4e9b\u6570\u636e\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u7d27\u6025\u60c5\u51b5\u7684\u6b21\u6570\nprint(df.groupby(by = \"cate\").count()[\"title\"])\n</code></pre>"},{"location":"pandas/pandas_timeseries/#question-two","title":"Question Two","text":"<ul> <li>\u5982\u679c\u6211\u4eec\u8fd8\u60f3\u7edf\u8ba1\u51fa\u4e0d\u540c\u6708\u4efd\u4e0d\u540c\u7c7b\u578b\u7d27\u6025\u7535\u8bdd\u7684\u6b21\u6570\u7684\u53d8\u5316\u60c5\u51b5\uff0cHow?</li> </ul>"},{"location":"pandas/pandas_timeseries/#solution_1","title":"Solution","text":"<p>Python<pre><code># Step 1: \u964d\u91c7\u6837\ndf[\"timeStamp\"] = pd.to_datetime(df[\"timeStamp\"]) #\u5c06\u65f6\u95f4\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u65f6\u95f4\u7c7b\u578b\ndf.set_index(\"timeStamp\", inplace = True)  # set timeStamp as index\n\n# Step 2: \u5bf9\u4e0d\u540c\u7684cate\u5206\u7c7b\u8fdb\u884c\u7ed8\u56fe\nplt.figure(figsize = (20, 10),dpi = 80)\n\nfor group_name, group_data in df.groupby(by = \"cate\"):\n    count_month = group_data.resample(\"M\").count()[\"title\"]\n    # Step 3: \u7ed8\u5236\u6298\u7ebf\u56fe\n    x = count_month.index\n        # change datetime format \n    _x = [i.strftime(\"%Y%m%d\") for i in x]\n    y = count_month.values\n    plt.plot(range(len(_x)), y, label = group_name)\n\nplt.xticks(range(len(_x)), _x, rotation = 45)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Frequency\")\nplt.legend(loc = \"best\")\nplt.title(\"2015\u52302020\u5e74\u4e0d\u540c\u6708\u4efd\u4e0d\u540c\u7c7b\u578b\u7d27\u6025\u7535\u8bdd\u7684\u6b21\u6570\u7684\u53d8\u5316\u60c5\u51b5\", fontproperties = my_font)\nplt.savefig(\"./pandas/911_by_month.png\")\nplt.show()\n</code></pre> </p>"},{"location":"reference/data_source/","title":"Data Source","text":""},{"location":"reference/data_source/#matplotlib","title":"Matplotlib","text":"<ul> <li>http://lishi.tianqi.com/beijing/index.html </li> <li>http://www.cbooo.cn/movieday </li> <li>https://en.wikipedia.org/wiki/Histogram </li> </ul> <p>Footnote: two expired links are omitted </p>"},{"location":"reference/data_source/#numpy","title":"Numpy","text":"<ul> <li>Trending YouTube Video Statistics and Comments</li> </ul>"},{"location":"reference/data_source/#pandas","title":"Pandas","text":"<ul> <li>NYC Dog Names</li> <li>Sunday EDA</li> <li>Starbucks Locations Worldwide</li> <li>goodbooks-10k</li> <li>Emergency - 911 Calls</li> <li>PM2.5 Data of Five Chinese Cities</li> </ul>"},{"location":"tools/tool_collection/","title":"Graphing Libraries","text":"<p>There are many tools out there for graphing, and here is a list </p>"},{"location":"tools/tool_collection/#declariation","title":"Declariation","text":"<p>I am not the creator of these tools. </p>"},{"location":"tools/tool_collection/#list-of-tools","title":"List of Tools","text":"<ul> <li>Plotly Open Source Graphing Library for Python </li> <li>Seaborn Gallary </li> <li>Echarts </li> </ul>"}]}