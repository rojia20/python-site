{"config":{"lang":["zh","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"matplotlib/matplotlib_barchart/","title":"Bar Chat","text":""},{"location":"matplotlib/matplotlib_barchart/#import-modules","title":"Import Modules","text":"Text Only<pre><code>import pyplot\nimport matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_barchart/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":""},{"location":"matplotlib/matplotlib_barchart/#for-macos","title":"For macOS","text":"Text Only<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_barchart/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_barchart/#background","title":"Background","text":"<p>\u5047\u8bbe\u73b0\u5728\u67092017\u5e74\u5185\u5730\u7535\u5f71\u7968\u623f\u524d20\u7684\u7535\u5f71(\u5217\u8868a)\u548c\u7535\u5f71\u7968\u623f\u6570\u636e(\u5217\u8868b)</p> <p>Text Only<pre><code>a = \n[\"\u6218\u72fc2\",\"\u901f\u5ea6\u4e0e\u6fc0\u60c58\",\"\u529f\u592b\u745c\u4f3d\",\"\u897f\u6e38\u4f0f\u5996\u7bc7\",\"\u53d8\u5f62\u91d1\u521a5\uff1a\u6700\u540e\u7684\u9a91\u58eb\",\"\u6454\u8de4\u5427\uff01\u7238\u7238\",\n     \"\u52a0\u52d2\u6bd4\u6d77\u76d75\uff1a\u6b7b\u65e0\u5bf9\u8bc1\",\"\u91d1\u521a\uff1a\u9ab7\u9ac5\u5c9b\",\"\u6781\u9650\u7279\u5de5\uff1a\u7ec8\u6781\u56de\u5f52\",\"\u751f\u5316\u5371\u673a6\uff1a\u7ec8\u7ae0\",\"\u4e58\u98ce\u7834\u6d6a\",\"\u795e\u5077\u5976\u72383\",\n     \"\u667a\u53d6\u5a01\u864e\u5c71\",\"\u5927\u95f9\u5929\u7afa\",\"\u91d1\u521a\u72fc3\uff1a\u6b8a\u6b7b\u4e00\u6218\",\"\u8718\u86db\u4fa0\uff1a\u82f1\u96c4\u5f52\u6765\",\"\u609f\u7a7a\u4f20\",\"\u94f6\u6cb3\u62a4\u536b\u961f2\",\"\u60c5\u5723\",\"\u65b0\u6728\u4e43\u4f0a\"]\n</code></pre> Text Only<pre><code>b = [56.01,26.94,17.53,16.49,15.45,12.96,11.8,11.61,11.28,11.12,10.49,10.3,8.75,\n   7.55,7.32,6.99,6.88,6.86,6.58,6.23]\n</code></pre> - \u7535\u5f71\u7968\u623f\u6570\u636e\u7684\u5355\u4f4d\uff1a\u4ebf </p>"},{"location":"matplotlib/matplotlib_barchart/#modify-dataset-a","title":"Modify dataset a","text":"<p>Text Only<pre><code>a = \n[\"\u6218\u72fc2\",\"\u901f\u5ea6\u4e0e\u6fc0\u60c58\",\"\u529f\u592b\u745c\u4f3d\",\"\u897f\u6e38\u4f0f\u5996\u7bc7\",\"\u53d8\u5f62\u91d1\u521a5\uff1a\\n\u6700\u540e\u7684\u9a91\u58eb\",\"\u6454\u8de4\u5427\uff01\u7238\u7238\",\n     \"\u52a0\u52d2\u6bd4\u6d77\u76d75\uff1a\\n\u6b7b\u65e0\u5bf9\u8bc1\",\"\u91d1\u521a\uff1a\\n\u9ab7\u9ac5\u5c9b\",\"\u6781\u9650\u7279\u5de5\uff1a\\n\u7ec8\u6781\u56de\u5f52\",\"\u751f\u5316\u5371\u673a6\uff1a\\n\u7ec8\u7ae0\",\"\u4e58\u98ce\u7834\u6d6a\",\"\u795e\u5077\u5976\u72383\",\n     \"\u667a\u53d6\u5a01\u864e\u5c71\",\"\u5927\u95f9\u5929\u7afa\",\"\u91d1\u521a\u72fc3\uff1a\\n\u6b8a\u6b7b\u4e00\u6218\",\"\u8718\u86db\u4fa0\uff1a\\n\u82f1\u96c4\u5f52\u6765\",\"\u609f\u7a7a\u4f20\",\"\u94f6\u6cb3\u62a4\u536b\u961f2\",\"\u60c5\u5723\",\"\u65b0\u6728\u4e43\u4f0a\"]\n</code></pre> - code: \\n --&gt; \u7528\u6765\u6362\u884c</p>"},{"location":"matplotlib/matplotlib_barchart/#question","title":"Question","text":"<p>\u5982\u4f55\u66f4\u52a0\u76f4\u89c2\u7684\u5c55\u793a\u8be5\u6570\u636e\uff1f</p>"},{"location":"matplotlib/matplotlib_barchart/#solution","title":"Solution","text":"<p>Categorical data, so using bar chat</p> <p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 20), dpi = 80)\n\n# Step 2: determine number of movies in the dataset a --&gt; equals to the number of bars\nx = range(len(a)) \nprint(x)\n\n# Step 3: draw the bar chat \nplt.bar(x, b, width = 0.3)\n\n# Step 4: set the x-axis\nplt.xticks(x, a, font_properties = my_font, rotation = 60)\n\n# Step 5: add description\nplt.xlabel(\"Name\")\nplt.ylabel(\"Sales\")\nplt.title(\"2017\u5e74\u5185\u5730\u7535\u5f71\u7968\u623f\u524d20\u7684\u7535\u5f71\u548c\u5176\u7968\u623f\u6570\u636e\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_1\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_barchart/#alternative-solution","title":"Alternative Solution","text":"<p>Draw a horizontal bar chat </p> <p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 10), dpi = 80)\n\n# Step 2: determine number of movies in the dataset a --&gt; equals to the number of bars\nx = range(len(a)) \nprint(x)\n\n# Step 3: draw the horizontal bar chat \nplt.barh(x, b, height = 0.3, color = \"orange\")\n\n# Step 4: set the x-axis\nplt.yticks(x, a, font_properties = my_font)\n\n# Step 5: add description\nplt.xlabel(\"Sales\")\nplt.ylabel(\"Name\")\nplt.title(\"2017\u5e74\u5185\u5730\u7535\u5f71\u7968\u623f\u524d20\u7684\u7535\u5f71\u548c\u5176\u7968\u623f\u6570\u636e\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_2\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_barchart/#case-two","title":"Case Two","text":""},{"location":"matplotlib/matplotlib_barchart/#background_1","title":"Background","text":"<p>\u56db\u90e8\u7535\u5f71\u5206\u522b\u57282017-09-14\u52302017-09-16\u4e09\u5929\u7684\u7968\u623f Text Only<pre><code>a = [\"\u7329\u7403\u5d1b\u8d773\uff1a\u7ec8\u6781\u4e4b\u6218\",\"\u6566\u523b\u5c14\u514b\",\"\u8718\u86db\u4fa0\uff1a\u82f1\u96c4\u5f52\u6765\",\"\u6218\u72fc2\"]\n</code></pre> Text Only<pre><code>b_16 = [15746,312,4497,319]\nb_15 = [12357,156,2045,168]\nb_14 = [2358,399,2358,362]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_barchart/#question_1","title":"Question","text":"<p>\u8bf7\u5c55\u73b0\u6bcf\u90e8\u7535\u5f71\u7684\u7968\u623f\uff0c\u540c\u65f6\u4e0e\u5176\u4ed6\u51e0\u90e8\u7535\u5f71\u7684\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4</p>"},{"location":"matplotlib/matplotlib_barchart/#solution_1","title":"Solution","text":"<p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: determine number of movies in the dataset a\n--&gt; equals to number of bars needed for 9\u670814\u65e5\nx_14 = list(range(len(a)))\n\n# Step 3: to avoid the overlapping of each bar\nbar_width = 0.2\nx_15 = [i + bar_width for i in x_14]\nx_16 = [i + bar_width * 2 for i in x_14]\n\n# Step 3: plot mutiple bar chats \nplt.bar(x_14, b_14, width = bar_width, color = \"#FFB6C1\", label = \"9\u670814\u65e5\")\nplt.bar(x_15, b_15, width = bar_width, color = \"#FFD700\", label = \"9\u670815\u65e5\")\nplt.bar(x_16, b_16, width = bar_width, color = \"#B0E0E6\", label = \"9\u670816\u65e5\")\n\n# Step 4: set the x-axis (\u53ea\u9700\u8981\u5c45\u4e2d\u5bf9\u9f50\u5373\u53ef)\nplt.xticks(x_15, a, font_properties = my_font)\n\n# Step 5: add description\nplt.xlabel(\"Name\")\nplt.ylabel(\"Sales\")\nplt.title(\"2017\u5e74\u51859\u670814\u65e5\u523016\u65e5\u5185\u5730\u7535\u5f71\u7968\u623f\u5bf9\u6bd4\", fontproperties = my_font)\nplt.legend(loc = \"best\", prop = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_3\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_histogram/","title":"Histogram","text":""},{"location":"matplotlib/matplotlib_histogram/#import-modules","title":"Import Modules","text":"Text Only<pre><code>import matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_histogram/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":""},{"location":"matplotlib/matplotlib_histogram/#for-macos","title":"For macOS","text":"Text Only<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_histogram/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_histogram/#background","title":"Background","text":"<p>\u73b0\u6709250\u90e8\u7535\u5f71\u7684\u65f6\u957f(\u5217\u8868a)</p> Text Only<pre><code>a = \n[131,  98, 125, 131, 124, 139, 131, 117, 128, 108, 135, 138, 131, 102, 107, 114, 119, 128, \n   121, 142, 127, 130, 124, 101, 110, 116, 117, 110, 128, 128, 115,  99, 136, 126, 134,  95, \n   138, 117, 111,78, 132, 124, 113, 150, 110, 117,  86,  95, 144, 105, 126, 130,126, 130, 126, \n   116, 123, 106, 112, 138, 123,  86, 101,  99, 136,123, 117, 119, 105, 137, 123, 128, 125, 104, \n   109, 134, 125, 127,105, 120, 107, 129, 116, 108, 132, 103, 136, 118, 102, 120, 114,105, 115, \n   132, 145, 119, 121, 112, 139, 125, 138, 109, 132, 134,156, 106, 117, 127, 144, 139, 139, 119, \n   140,  83, 110, 102,123,107, 143, 115, 136, 118, 139, 123, 112, 118, 125, 109, 119, 133,112, 114, \n   122, 109, 106, 123, 116, 131, 127, 115, 118, 112, 135,115, 146, 137, 116, 103, 144,  83, 123, 111, \n   110, 111, 100, 154,136, 100, 118, 119, 133, 134, 106, 129, 126, 110, 111, 109, 141,120, 117, 106, \n   149, 122, 122, 110, 118, 127, 121, 114, 125, 126,114, 140, 103, 130, 141, 117, 106, 114, 121, 114, \n   133, 137,  92,121, 112, 146,  97, 137, 105,  98, 117, 112,  81,  97, 139, 113,134, 106, 144, 110, \n   137, 137, 111, 104, 117, 100, 111, 101, 110,105, 129, 137, 112, 120, 113, 133, 112,  83,  94, 146, \n   133, 101,131, 116, 111,  84, 137, 115, 122, 106, 144, 109, 123, 116, 111,111, 133, 150]\n</code></pre>"},{"location":"matplotlib/matplotlib_histogram/#question","title":"Question","text":"<p>\u5e0c\u671b\u7edf\u8ba1\u51fa\u8fd9\u4e9b\u7535\u5f71\u65f6\u957f\u7684\u5206\u5e03\u72b6\u6001(\u6bd4\u5982\u65f6\u957f\u4e3a100\u5206\u949f\u5230120\u5206\u949f\u7535\u5f71\u7684\u6570\u91cf\u3001\u51fa\u73b0\u7684\u9891\u7387)\u7b49\u4fe1\u606f</p>"},{"location":"matplotlib/matplotlib_histogram/#solution","title":"Solution","text":"<p>Numerical data, so using histogram</p> <p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 10), dpi = 80)\n\n# Step 2: Calculate the number of bins needed for x-axis\n# us // for integer divison \nbin_width = 3 # based on mutiple trials (plot and adjust)\nnum_bins = (max(a) - min(a))//bin_width \n\n# Step 3: draw the bar chat \n# add density = Ture --&gt; turning the y-axis into percentage instead of absolute counts\nplt.hist(a, num_bins, density = True, color = \"orange\")\n\n# Step 4: set the x-axis\nplt.xticks(range(min(a), max(a) + bin_width, bin_width))\n\n# Step 5: add description\nplt.xlabel(\"Length of Film\")\nplt.ylabel(\"Frequency\")\nplt.title(\"250\u90e8\u7535\u5f71\u7684\u65f6\u957f\u5206\u5e03\u56fe\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/film_4.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_histogram/#case-two","title":"Case Two","text":""},{"location":"matplotlib/matplotlib_histogram/#background_1","title":"Background","text":"<p>\u7f8e\u56fd2004\u5e74\u4eba\u53e3\u666e\u67e5\u53d1\u73b0\u6709124 million\u7684\u4eba\u5728\u79bb\u5bb6\u76f8\u5bf9\u8f83\u8fdc\u7684\u5730\u65b9\u5de5\u4f5c\u3002\u6839\u636e\u4ed6\u4eec\u4ece\u5bb6\u5230\u4e0a\u73ed\u5730\u70b9\u6240\u9700\u8981\u7684\u65f6\u95f4,\u901a\u8fc7\u62bd\u6837\u7edf\u8ba1(\u6700\u540e\u4e00\u5217)\u51fa\u4e86\u4e0b\u8868\u7684\u6570\u636e Text Only<pre><code>interval = [0,5,10,15,20,25,30,35,40,45,60,90]\nint_width = [5,5,5,5,5,5,5,5,5,15,30,60]\nquantity = [836,2737,3723,3926,3596,1438,3273,642,824,613,215,47]\n</code></pre> - \u4e0d\u80fd\u4f7f\u7528plt.hist.\u56e0\u4e3aplt.hist\u9700\u8981raw data</p>"},{"location":"matplotlib/matplotlib_histogram/#question_1","title":"Question","text":"<p>\u8bf7\u5c55\u793a\u7f8e\u56fd2004\u5e74\u4eba\u53e3\u666e\u67e5\u4e2d\u4ece\u5bb6\u5230\u516c\u53f8\u6240\u9700\u65f6\u95f4\u7684\u5206\u5e03</p>"},{"location":"matplotlib/matplotlib_histogram/#solution_1","title":"Solution","text":"<p>\u7ed8\u5236\u6761\u5f62\u56fe\uff0c\u5e76\u8ba9\u6bcf\u6761bar\u90fd\u5e76\u5728\u4e00\u8d77\uff0c\u8fbe\u5230histogram\u7684\u6548\u679c  - bar chat has a default width of 0.8</p> <p>Text Only<pre><code>x = interval \ny = quantity \n\n# Step 1: Set the figure size\nplt.figure(figsize = (20, 10), dpi = 80)\n\n# Step 2: check the dimension of each dataset --&gt; make sure they are matched\n# for range(x), x must be integer not a list\nprint(len(interval), len(int_width), len(quantity))\n\n# Step 3: plot the bar chat\n# since there are 12 items in each dataset, so use range(12) for convenience \nplt.bar(range(12), y, width = 1)\n\n# Step 4: set the x-axis (\u5bf9\u5e94\u771f\u6b63\u7684interval\u523b\u5ea6)\n_x = [i - 0.5 for i in range(len(x)+1)]\n_xtick_labels = x + [150]\nplt.xticks(_x, _xtick_labels)\n\n# Step 5: add description\nplt.xlabel(\"Time to Work\")\nplt.ylabel(\"Number of People\")\nplt.title(\"\u7f8e\u56fd2004\u5e74\u4eba\u53e3\u666e\u67e5\uff1a\u4ece\u5bb6\u5230\u516c\u53f8\u6240\u9700\u65f6\u95f4\u7684\u5206\u5e03\", fontproperties = my_font)\nplt.grid(alpha = 0.3)\n\n# Step 6: save and display figure\nplt.savefig(\"./matplotlib/distance.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/","title":"Line Chat","text":""},{"location":"matplotlib/matplotlib_linechart/#import-modules","title":"Import Modules","text":"Text Only<pre><code>import matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_linechart/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":""},{"location":"matplotlib/matplotlib_linechart/#for-macos","title":"For macOS","text":"Text Only<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_linechart/#demo","title":"Demo","text":""},{"location":"matplotlib/matplotlib_linechart/#demo-1","title":"Demo 1","text":"Text Only<pre><code>plt.plot([1, 3, 5],[4, 8, 10])\nplt.show()\n</code></pre>"},{"location":"matplotlib/matplotlib_linechart/#demo-2","title":"Demo 2","text":"<p>Text Only<pre><code>x = range(2, 26, 2)\n</code></pre> Text Only<pre><code>y = [15, 13, 14.5, 17, 20, 25, 26, 26, 24, 22, 18, 15]\n</code></pre> Text Only<pre><code># set the size of graph\nplt.figure(figsize = (20, 8), dpi = 80) #width, hight\n\n# plot the graph \nplt.plot(x, y)\n\n# plot x and y axis with specific spacing\uff08\u533a\u95f4\uff09\nplt.xticks(range(2, 25))\n\n# with half-size spacing\nxtick_lables = [i/2 for i in range (4, 49)]\n\n# only showcase every-three marks\nplt.xticks(xtick_lables[::3])\n\n# for y-axis spacing\nplt.yticks(range(min(y), max(y)+1))\n\n#save the graph \nplt.savefig(\"./matplotlib/graph.png\")\n\n# display the graph \nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_linechart/#background","title":"Background","text":"<p>\u5982\u4e0b\u6570\u636e\u662f10\u70b9\u523012\u70b9\u6bcf\u5206\u949f\u7684\u6c14\u6e29\u53d8\u5316\u60c5\u51b5</p> <p>Text Only<pre><code>x = range(0, 120)\n</code></pre> Text Only<pre><code>y = [random.randint(20, 35) for i in range(120)]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_linechart/#question","title":"Question","text":"<p>\u5c55\u793a10\u70b9\u523012\u70b9\u6bcf\u5206\u949f\u7684\u6c14\u6e29\u53d8\u5316\u60c5\u51b5</p>"},{"location":"matplotlib/matplotlib_linechart/#solution","title":"Solution","text":"<p>Since we are looking for trend, and the data is numercial, so we are going to use line chat</p> <p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot the temperature for every minutes between 10 to 12 pm\nplt.plot(x, y)\n\n# Step 3: set the x-axis (\u8868\u793a\u4e3a\u65f6\u95f4)\n_x = list(x)\nxtick_lables = [\"10\u70b9{}\u5206\".format(i) for i in range(60)]\nxtick_lables += [\"11\u70b9{}\u5206\".format(i) for i in range(60)]\n\n# align spacing, rotate the x-axis lables to certain degree, \u4f7fmatplotlib\u663e\u793a\u4e2d\u6587\nplt.xticks(_x[::3], xtick_lables[::3], rotation = 90, fontproperties = my_font)\n\n# Step 4: add description\nplt.xlabel(\"time\")\nplt.ylabel(\"temperature unit(\u02dac)\")\nplt.title(\"10\u70b9\u523012\u70b9\u6bcf\u5206\u949f\u7684\u6c14\u6e29\u53d8\u5316\u60c5\u51b5\", fontproperties = my_font)\n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/temp.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/#case-two","title":"Case Two","text":""},{"location":"matplotlib/matplotlib_linechart/#background_1","title":"Background","text":"<p>\u5047\u8bbe\u67d0\u4eba11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55\u5982\u4e0b</p> <p>Text Only<pre><code>x = range(11, 31)\n</code></pre> Text Only<pre><code>y = [1, 0, 1, 1, 2, 4, 3, 2, 3, 4, 4, 5, 6, 5, 4, 3, 3, 1, 1, 1]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_linechart/#question_1","title":"Question","text":"<p>\u8bf7\u4f7f\u7528\u56fe\u8868\u5c55\u73b0\u6b64\u4eba11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55</p>"},{"location":"matplotlib/matplotlib_linechart/#solution_1","title":"Solution","text":"<p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot the figure \nplt.plot(x, y)\n\n# Step 3: set the x-axis\nxtick_lables = [\"{}\u5c81\".format(i) for i in x]\nplt.xticks(x, xtick_lables, fontproperties = my_font)\nplt.yticks(range(0, 9))\n\n# Step 4: add description\nplt.xlabel(\"age\")\nplt.ylabel(\"number of boyfriend\")\nplt.title(\"The Summary of One's Dating Histroy From Age of 11 to 30\")\n\n# to change the transparency of the grid\nplt.grid(alpha = 0.3)\n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/bf.png\")\nplt.show()\n</code></pre> </p>"},{"location":"matplotlib/matplotlib_linechart/#case-three","title":"Case Three","text":""},{"location":"matplotlib/matplotlib_linechart/#background_2","title":"Background","text":"<p>\u5047\u8bbe\u67d0\u4eba\u548c\u5176\u670b\u53cb11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55\u5982\u4e0b</p> <p>Text Only<pre><code>x = range(11, 31)\n</code></pre> Text Only<pre><code>y = [1, 0, 1, 1, 2, 4, 3, 2, 3, 4, 4, 5, 6, 5, 4, 3, 3, 1, 1, 1]\n</code></pre> Text Only<pre><code>z = [1, 0, 3, 1, 2, 2, 3, 3, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_linechart/#question_2","title":"Question","text":"<p>\u8bf7\u4f7f\u7528\u56fe\u8868\u5c55\u73b0\u6b64\u4eba\u548c\u5176\u670b\u53cb11\u5c81\u523030\u5c81\u7684\u4ea4\u5f80\u8bb0\u5f55</p>"},{"location":"matplotlib/matplotlib_linechart/#solution_2","title":"Solution","text":"<p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot the figure \n# \u989c\u8272\u53ef\u4ee5\u76f4\u63a5\u641c\u5341\u516d\u8fdb\u5236\u989c\u8272\u4ee3\u7801\nplt.plot(x, y, label = \"myself\", color = \"blue\")\nplt.plot(x, z, label = \"my friend\", color = \"red\", linestyle = \"--\")\n\n# Step 3: set the x-axis\nxtick_lables = [\"{}\u5c81\".format(i) for i in x]\nplt.xticks(x, xtick_lables, fontproperties = my_font)\nplt.yticks(range(0, 9))\n\n# Step 4: add description\nplt.xlabel(\"age\")\nplt.ylabel(\"number of boyfriend\")\nplt.title(\"The Summary of One's Dating Histroy From Age of 11 to 30\")\nplt.grid(alpha = 0.3, linestyle = \":\")\n\n# \u7ed8\u5236\u56fe\u4f8b and specify location\n# 0 = find the best loation automatically \uff08\u770b\u6e90\u7801\u67e5\u4f4d\u7f6e\u7684\u4ee3\u7801\uff09\nplt.legend(loc = 0) \n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/bf_2.png\")\nplt.show()\n</code></pre> - when hoping to use Chinese charaters in legend --&gt; plt.legend(prop = my_font)</p> <p></p>"},{"location":"matplotlib/matplotlib_scatter/","title":"Scatter Plot","text":""},{"location":"matplotlib/matplotlib_scatter/#import-modules","title":"Import Modules","text":"Text Only<pre><code>import matplotlib.pyplot as plt\nimport random\nimport matplotlib\nfrom matplotlib import font_manager \n</code></pre>"},{"location":"matplotlib/matplotlib_scatter/#define-font-for-chinese-charaters","title":"Define Font for Chinese Charaters","text":""},{"location":"matplotlib/matplotlib_scatter/#for-macos","title":"For macOS","text":"Text Only<pre><code>my_font = font_manager.FontProperties(size = 12, fname = \"/System/Library/Fonts/Hiragino Sans GB.ttc\")\n</code></pre>"},{"location":"matplotlib/matplotlib_scatter/#case-one","title":"Case One","text":""},{"location":"matplotlib/matplotlib_scatter/#background","title":"Background","text":"<p>\u5317\u4eac2016\u5e743\u548c10\u6708\u4efd\u6bcf\u5929\u767d\u5929\u7684\u6700\u9ad8\u6c14\u6e29\uff08\u5206\u522b\u4f4d\u4e8e\u5982\u4e0b\u5217\u8868\uff09</p> <p>Text Only<pre><code>x_3 = range(1, 32)\n\nx_10 = range(51,82)\n</code></pre> Text Only<pre><code>y_3 = [11,17,16,11,12,11,12,6,6,7,8,9,12,15,14,17,18,21,16,17,20,14,15,15,15,19,21,22,22,22,23]\n\ny_10 = [26,26,28,19,21,17,16,19,18,20,20,19,22,23,17,20,21,20,22,15,11,15,5,13,17,10,11,13,12,13,6]\n</code></pre></p>"},{"location":"matplotlib/matplotlib_scatter/#question","title":"Question","text":"<p>\u5bfb\u627e\u6c14\u6e29\u968f\u65f6\u95f4\uff08\u5929\uff09\u53d8\u5316\u7684\u67d0\u79cd\u89c4\u5f8b</p>"},{"location":"matplotlib/matplotlib_scatter/#solution","title":"Solution","text":"<p>Since we are looking for the correlation bettween temperature and time, using scatter plot</p> <p>Text Only<pre><code># Step 1: set the figure size \nplt.figure(figsize = (20, 8), dpi = 80)\n\n# Step 2: plot x aginst y for March and October\nplt.scatter(x_3, y_3, label = \"3\u6708\")\nplt.scatter(x_10, y_10, label = \"10\u6708\")\n\n# Step 3: set the x-axis\n_x = list(x_3) + list(x_10)\n_xtick_lables = [\"3\u6708{}\u65e5\".format(i) for i in x_3]\n_xtick_lables += [\"10\u6708{}\u65e5\".format(i - 50) for i in x_10]\nplt.xticks(_x[::3], _xtick_lables[::3], fontproperties = my_font, rotation = 45)\n\n# Step 4: add description\nplt.xlabel(\"Date\")\nplt.ylabel(\"Temperature\")\nplt.title(\"\u5317\u4eac2016\u5e743\u548c10\u6708\u4efd\u6c14\u6e29\u968f\u65f6\u95f4\u53d8\u5316\", fontproperties = my_font)\nplt.legend(loc = \"best\", prop = my_font)\n\n# Step 5: save and display figure\nplt.savefig(\"./matplotlib/weather.png\")\nplt.show()\n</code></pre> </p>"},{"location":"numpy/numpy_infinity/","title":"Numpy - Infinity","text":""},{"location":"numpy/numpy_infinity/#_1","title":"\u524d\u8a00","text":"<ul> <li>Positive Infinity<ul> <li>inf </li> </ul> </li> <li>Negative Infinity<ul> <li>-inf </li> </ul> </li> <li>Data Type of Infinity<ul> <li>data type = float</li> </ul> </li> <li>\u51fa\u73b0 infinity \u7684\u60c5\u666f\uff1a<ol> <li>18/0<ul> <li>python \u4e2d\u4f1a\u76f4\u63a5\u62a5\u9519</li> <li>numpy \u4e2d\u4f1a\u51fa\u73b0 inf or -inf</li> </ul> </li> </ol> </li> </ul>"},{"location":"numpy/numpy_nan/","title":"Numpy - All About NaN","text":""},{"location":"numpy/numpy_nan/#_1","title":"\u524d\u8a00","text":"<ul> <li>NaN \u8868\u793a not a number </li> <li>\u51fa\u73b0 NaN\u7684\u60c5\u666f\uff1a<ol> <li>0/0</li> <li>data is missing</li> <li>data type \uff08dtype\uff09is float</li> <li>inappropriate calculation<ul> <li>eg. (infinity - infinity)</li> </ul> </li> </ol> </li> <li>np.nan \u4e0e np.nan \u4e0d\u76f8\u7b49<ul> <li>np.nan == np.nan --&gt; output: False</li> <li>np.nan != np.nan --&gt; output: True</li> </ul> </li> </ul>"},{"location":"numpy/numpy_nan/#import-modules","title":"Import Modules","text":"Text Only<pre><code>import numpy as np\n</code></pre>"},{"location":"numpy/numpy_nan/#assign-nan","title":"Assign NaN","text":"<ul> <li>create an array with the data point (3, 3) is NaN Text Only<pre><code># create an array\nt1 = np.arange(24).reshape(4, 6)\nprint(t1)\n\n# assign data point (3,3) to NaN\nt4 = t1.astype(float)\nt4[3, 3] = np.nan \nprint(t4)\n</code></pre></li> </ul>"},{"location":"numpy/numpy_nan/#array-nan","title":"\u5224\u65ad array\uff08\u6570\u7ec4\uff09\u4e2d NaN \u4e2a\u6570","text":"<ul> <li>\u5229\u7528 NaN \u7279\u6027 Text Only<pre><code># count numbers of NaN in t4\n# \u56e0\u4e3a\u53ea\u6709 nan \u65f6 t4 != t4 \u4e3a True \uff08= 1\uff09\uff0c\u5176\u4ed6\u4e3a False\nprint(np.count_nonzero(t4 != t4)) \n</code></pre> Text Only<pre><code># alternative way to count numbers of nan in t4\nprint(np.count_nonzero(np.isnan(t4)))\n</code></pre></li> </ul>"},{"location":"numpy/numpy_nan/#_2","title":"\u62d3\u5c55","text":"<ul> <li>Count numbers of nonzero in t4 Text Only<pre><code>t4[:,0] = 0\nprint(t4)\n\nprint(np.count_nonzero(t4))\n</code></pre></li> </ul>"},{"location":"numpy/numpy_nan/#nan","title":"\u5224\u65ad\u5f53\u524d\u6570\u7ec4\u4e2d\u54ea\u4e2a\u6570\u503c\u4e3a NaN","text":"<ul> <li>\u5229\u7528 NaN \u7279\u6027 Text Only<pre><code>print(np.isnan(t4)) \n\n# output\uff1adtype = bool\n</code></pre> Text Only<pre><code># alternative way to print the bool array\nprint(t4 != t4)\n</code></pre></li> </ul>"},{"location":"numpy/numpy_nan/#nan_1","title":"NaN \u6709\u5173\u7684\u8ba1\u7b97","text":"<ul> <li>NaN \u548c\u4efb\u4f55\u503c\u8ba1\u7b97\uff0c\u7ed3\u679c\u90fd\u4e3a NaN</li> </ul>"},{"location":"numpy/numpy_nan/#demo-1","title":"Demo 1","text":"<p>Text Only<pre><code>print(np.sum(t4))\n</code></pre> Text Only<pre><code>print(np.sum(t4,axis = 0)) \n\n# output = [ 0. 40. 44. nan 52. 56.]\n</code></pre></p>"},{"location":"numpy/numpy_nan/#demo-2","title":"Demo 2:","text":"<p>Text Only<pre><code># create a new array\nt5 = np.arange(12).reshape(3, 4)\nprint(t5)\n</code></pre> Text Only<pre><code>print(np.sum(t5))\n</code></pre> Text Only<pre><code># \u6307\u5b9a\u6c42\u54ea\u4e2a\u65b9\u5411\u7684\u548c - using axis\nprint(np.sum(t5, axis = 0)) \n\n# axis = 0 \u8868\u793a\u6c42\u6bcf\u4e00\u5217\u7684\u548c\uff08column total\uff09\n# shape of output is as same as each row \n</code></pre> Text Only<pre><code>print(np.sum(t5, axis = 1)) \n\n# axis = 1 \u8868\u793a\u6c42\u6bcf\u4e00\u884c\u7684\u548c\uff08row total\uff09\n# shape of output is as same as each column\n</code></pre></p>"},{"location":"numpy/numpy_nan/#nan_2","title":"\u5904\u7406 NaN \u7684\u64cd\u4f5c","text":""},{"location":"numpy/numpy_nan/#1","title":"\u65b9\u6cd5 1","text":"<ul> <li>\u7528\u8be5\u5217/\u884c\u7684\u5747\u503c (or median) \u66ff\u6362 NaN <ul> <li>depends on whether we looking for column or row total</li> </ul> </li> </ul>"},{"location":"numpy/numpy_nan/#2-not-recommended","title":"\u65b9\u6cd5 2 (not recommended)","text":"<ul> <li>\u76f4\u63a5\u5220\u9664\u6709\u7f3a\u5931\u503c\u7684\u90a3\u4e00\u884c <ul> <li>\u56e0\u4e3a\u4e00\u884c\u88ab\u89c6\u4e3a\u4e00\u6761\u6570\u636e</li> </ul> </li> </ul>"},{"location":"numpy/numpy_readdata/","title":"Numpy - \u8bfb\u53d6\u6570\u636e","text":""},{"location":"numpy/numpy_readdata/#_1","title":"\u524d\u8a00","text":"<ul> <li>\u8bfb\u53d6\u6570\u636e\u4e00\u822c\u4e0d\u7528numpy\uff0c\u800c\u662fpandas<ul> <li>pandas\u66f4\u5f3a\u5927</li> </ul> </li> <li>Data file\u7684\u683c\u5f0f\u901a\u5e38\u662fCSV file (comma-separated value)<ul> <li>np.loadtxt(fname,dtype=np.float,delimiter=None,skiprows=0,usecols=None,unpack=False)<ul> <li>delimiter --&gt; \u5206\u9694\u5b57\u7b26\u4e32\uff1b\u9ed8\u8ba4\u662f\u7a7a\u683c\uff0c\u53ef\u6539\u4e3a\u9017\u53f7</li> <li>skiprows --&gt; \u8df3\u8fc7\u524dX\u884c</li> <li>usecols --&gt; \u8bfb\u53d6\u6307\u5b9a\u7684\u5217</li> <li>unpack --&gt; \u8f6c\u5236: \u5c06\u884c\u8f6c\u6210\u5217\uff0c\u5c06\u5217\u8f6c\u6210\u884c <ul> <li>\u9ed8\u8ba4\u4e3a unpack = False</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"numpy/numpy_readdata/#import-modules","title":"Import Modules","text":"Text Only<pre><code>import numpy as np\n</code></pre>"},{"location":"numpy/numpy_readdata/#read-csv-file","title":"Read CSV file","text":"<p>Text Only<pre><code>us_file_path = \"./data/us_videos.csv\"\n\nuk_file_path = \"./data/gb_videos.csv\"\n</code></pre> Text Only<pre><code>us = np.loadtxt(us_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\n\nuk = np.loadtxt(uk_file_path, delimiter = \",\", dtype = \"int\", skiprows = 1)\n</code></pre></p>"},{"location":"numpy/numpy_readdata/#_2","title":"\u8f6c\u7f6e\u7684\u65b9\u6cd5","text":"Text Only<pre><code>t1 = np.arange(24).reshape(4, 6)\nprint(t1)\n</code></pre>"},{"location":"numpy/numpy_readdata/#demo-1","title":"Demo 1","text":"Text Only<pre><code>print(t1.transpose())\n</code></pre>"},{"location":"numpy/numpy_readdata/#demo-2","title":"Demo 2:","text":"Text Only<pre><code>print(t1.T)\n</code></pre>"},{"location":"numpy/numpy_readdata/#extract-certain-rows-or-columns","title":"Extract certain row(s) or column(s)","text":"<ul> <li>using []</li> <li>\u57fa\u672c\u683c\u5f0f\uff1aus[rows, columns]</li> </ul>"},{"location":"numpy/numpy_readdata/#extract-one-row","title":"Extract one row","text":"<p>Text Only<pre><code># extract the third row \nprint(us[2]) \n</code></pre> Text Only<pre><code># an alternative way\nprint(us[2, :]) \n</code></pre></p>"},{"location":"numpy/numpy_readdata/#extract-mutiple-rows","title":"Extract mutiple rows","text":"<p>Text Only<pre><code># extract second and thrid rows \nprint(us[1:3]) \n</code></pre> Text Only<pre><code># extract every row after the thrid row\nprint(us[2:]) \n</code></pre> Text Only<pre><code># extract multiple but inconsistant rows\nprint(us[[2, 8, 10]]) \n</code></pre></p>"},{"location":"numpy/numpy_readdata/#extract-one-column","title":"Extract one column","text":"Text Only<pre><code># extract the thrid column\n# : \u8868\u793a\u5bf9rows\u4e0d\u505a\u7279\u522b\u5904\u7406\nprint(us[:, 2]) \n</code></pre>"},{"location":"numpy/numpy_readdata/#extract-multiple-columns","title":"Extract multiple columns","text":"<p>Text Only<pre><code># extracting the second and third columns \nprint(us[:, 1:3]) \n</code></pre> Text Only<pre><code># extract every column after the thrid column\nprint(us[:, 2:])\n</code></pre> Text Only<pre><code># extract multiple but inconsistant columns\nprint(us[:, [0, 1, 3]]) \n</code></pre></p>"},{"location":"numpy/numpy_readdata/#extract-one-row-and-one-column","title":"Extract one row and one column","text":"<ul> <li>This is equivalent to extracting a data point</li> </ul> <p>Text Only<pre><code>a = us[2, 3] \nprint(a)\n</code></pre> Text Only<pre><code># check the data type of a\nprint(type(a)) \n\n# output: data type = numpy.int64\n</code></pre></p>"},{"location":"numpy/numpy_readdata/#extract-multiple-rows-and-multiple-columns-continuous","title":"Extract multiple rows and multiple columns (continuous)","text":"Text Only<pre><code>b = us[2:5, 1:4]\nprint(b)\n</code></pre>"},{"location":"numpy/numpy_readdata/#extract-multiple-rows-and-multiple-columns-inconsistant","title":"Extract multiple rows and multiple columns (inconsistant)","text":"<ul> <li>This is equivalent to extracting mutiple data points</li> </ul> Text Only<pre><code># \u53d6matrix\uff08\u6570\u9635\uff09\u4e2d\u4e0d\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9 --&gt; \u70b9\u5750\u6807, \u4f8b\uff1a\u4e00\u884c\u4e00\u5217\uff080\uff0c 0\uff09\uff0c\u4e09\u884c\u4e8c\u5217 \uff082\uff0c 1\uff09\uff09\nc = us[[0, 2], [0, 1]] \nprint(c)\n</code></pre>"},{"location":"numpy/numpy_readdata/#_3","title":"\u53d6\u6b65\u957f","text":"<ul> <li>\u4f8b\uff1ausing [:2]</li> </ul> <p>Text Only<pre><code># \u6bcf\u4e24\u5217\u4e00\u53d6 --&gt; \uff1a2 \u8868\u793a step == 2 \nprint(us[:, 2::2]) \n</code></pre> Text Only<pre><code># star from the second column, and step is 2, including the fourth column \nprint(us[:, 1::2]) \n</code></pre></p>"},{"location":"numpy/numpy_readdata/#manipulating-data","title":"Manipulating Data","text":""},{"location":"numpy/numpy_readdata/#manipulate-data-points-all-at-once","title":"Manipulate data points all at once","text":""},{"location":"numpy/numpy_readdata/#original-data","title":"Original data","text":"Text Only<pre><code>print(us[1,1:4]) \n</code></pre>"},{"location":"numpy/numpy_readdata/#assign-0-to-all","title":"Assign 0 to all","text":"Text Only<pre><code>us[1,1:4] = 0 \nprint(us[1,1:4])\n</code></pre>"},{"location":"numpy/numpy_readdata/#manipulate-data-points-with-conditions","title":"Manipulate data points with conditions","text":"<ul> <li> <p>\u539f\u7406: </p> <ul> <li>t1 &lt; 10 gives an output that has a dtype = bool \uff08True or False\uff09</li> <li>t1[t1 &lt;= 10] = 3 --&gt; \u5c06 t1 matrix \u4e2d True \u7684\u4f4d\u7f6e\u7edf\u7edf\u66ff\u6362\u4e3a3</li> </ul> </li> <li> </li> <li> <p>\u89e3\u6790:</p> <ul> <li>if t1 &lt; 10, then t1 = 0, otherwise t1 = 10</li> </ul> </li> <li> </li> <li> </li> </ul>"},{"location":"numpy/numpy_readdata/#manipulate-data-points-that-are-less-than-or-equal-to-10","title":"Manipulate data points that are less than or equal to 10","text":"Text Only<pre><code>t1[t1 &lt;= 10] = 3\nprint(t1)  \n</code></pre>"},{"location":"numpy/numpy_readdata/#replace-t1-10-with-0-and-t1-10-with-10","title":"Replace t1 &lt; 10 with 0 and t1 &gt; 10 with 10","text":"<ul> <li>\u4e00\u4e2a\u4e34\u754c\u70b9 Text Only<pre><code>t2 = np.where(t1 &lt; 10, 0, 10)\nprint(t2)\n</code></pre></li> </ul>"},{"location":"numpy/numpy_readdata/#replace-t1-10-with-10-and-t1-18-with-18","title":"Replace t1 &lt; 10 with 10 and t1 &gt; 18 with 18","text":"<ul> <li>\u4e24\u4e2a\u4e34\u754c\u70b9 Text Only<pre><code># clip \u7528\u6765\u88c1\u526a\nt3 = t1.clip(10, 18)\nprint(t3)\n</code></pre></li> </ul>"},{"location":"numpy/numpy_readdata/#a-data-with-nan","title":"\u8d4b\u503c a data with NaN","text":"<ul> <li>data must be float before converting Text Only<pre><code>t4 = t1.astype(float)\nt4[3, 3] = np.nan \nprint(t4)\n</code></pre></li> </ul>"},{"location":"numpy/numpy_readdata/#footnotes","title":"Footnotes","text":"<p>Using a divider when coding can achieve better visualization and clarity </p> <ul> <li>Example: ``` print(\"\"100) ````</li> </ul>"},{"location":"numpy/numpy_stats/","title":"Numpy - \u5e38\u89c1\u7684\u7edf\u8ba1\u65b9\u6cd5","text":""},{"location":"numpy/numpy_stats/#import-modules","title":"Import Modules","text":"Text Only<pre><code>import numpy as np\n</code></pre>"},{"location":"numpy/numpy_stats/#_1","title":"\u7edf\u8ba1\u65b9\u6cd5","text":"<ul> <li>without asigning axis, opertaions will be on the entire array (all values in the array regardless its dimension)</li> </ul>"},{"location":"numpy/numpy_stats/#sum","title":"Sum","text":"<p>Text Only<pre><code>np.sum(t)\n</code></pre> Text Only<pre><code># an alternative way\nt.sum \n\n# t is the name of an array\n</code></pre> - #### Demo Text Only<pre><code># create an array\nt1 = np.arange(24).reshape(4, 6)\nt4 = t1.astype(float)\nprint(t4)\n</code></pre> Text Only<pre><code>print(t4.sum(axis = 0))\n</code></pre></p>"},{"location":"numpy/numpy_stats/#mean","title":"Mean","text":"Text Only<pre><code>print(t4.mean(axis = 0))\n</code></pre>"},{"location":"numpy/numpy_stats/#median","title":"Median","text":"Text Only<pre><code>print(np.median(t4, axis = 0))\n</code></pre>"},{"location":"numpy/numpy_stats/#max","title":"Max","text":"Text Only<pre><code>print(t4.max(axis = 0))\n</code></pre>"},{"location":"numpy/numpy_stats/#min","title":"Min","text":"Text Only<pre><code>print(t4.min(axis = 0))\n</code></pre>"},{"location":"numpy/numpy_stats/#range-max-min","title":"Range: Max - Min","text":"Text Only<pre><code>print(np.ptp(t4, axis = 0))\n\n# ptp: peak-to-peak\n</code></pre>"},{"location":"numpy/numpy_stats/#standard-deviation","title":"Standard Deviation","text":"<ul> <li>Describe the distribution/dispersion of sample mean Text Only<pre><code>print(t4.std(axis = 0))\n</code></pre></li> </ul>"}]}